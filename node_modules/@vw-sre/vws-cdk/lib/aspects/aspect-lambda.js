"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaVPCAspect = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
/**
 * usage: Aspects.of(scope).add(new LambdaVPCAspect(vpc, sg))
 *  @param vpc VPC to add to all lambda functions that are not bound to a vpc. <br/>
 *       <i>Use a CfnSharedVpc#vpn for this, in order to use the CDK custom resources like BucketDeployment</i>
 *  @param securityGroup security group all the lambdas functions will be assigned to
 */
class LambdaVPCAspect {
    constructor(vpc, securityGroup, subnetSelection) {
        this.vpc = vpc;
        this.securityGroup = securityGroup;
        this.subnetSelection = subnetSelection;
    }
    /**
     * All aspects can visit an IConstruct.
     */
    visit(node) {
        this.patchRole(node);
        this.patchFunction(node);
    }
    patchFunction(node) {
        if (aws_cdk_lib_1.CfnResource.isCfnResource(node) && node.cfnResourceType == 'AWS::Lambda::Function') {
            if (node instanceof aws_lambda_1.CfnFunction) {
                if (!node.vpcConfig) {
                    node.addPropertyOverride('VpcConfig', this.getVpcConfig());
                }
            }
            else {
                // @ts-ignore
                if (!node.cfnProperties.VpcConfig) {
                    // @ts-ignore
                    node._cfnProperties = Object.assign(Object.assign({}, node.cfnProperties), { VpcConfig: this.getVpcConfig() });
                }
            }
        }
    }
    patchRole(node) {
        var _a;
        if (node instanceof aws_iam_1.Role) {
            if (node.managedPolicies
                .find((it) => it.managedPolicyArn.endsWith(LambdaVPCAspect.LAMBDA_BASIC_MANAGED_POLICY_NAME))) {
                node.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(LambdaVPCAspect.LAMBDA_VPC_MANAGED_POLICY_NAME));
            }
        }
        else if (aws_cdk_lib_1.CfnResource.isCfnResource(node) && node.cfnResourceType == aws_iam_1.CfnRole.CFN_RESOURCE_TYPE_NAME) {
            const oldPolicies = node._cfnProperties.ManagedPolicyArns || [];
            const basicManagedPolicy = (_a = oldPolicies
                .map((it) => this.mapToString(it))
                .find(((it) => it.endsWith(LambdaVPCAspect.LAMBDA_BASIC_MANAGED_POLICY_NAME)))) === null || _a === void 0 ? void 0 : _a[0];
            if (basicManagedPolicy) {
                node.addPropertyOverride('ManagedPolicyArns', [
                    ...oldPolicies,
                    { 'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, `:iam::aws:policy/${LambdaVPCAspect.LAMBDA_VPC_MANAGED_POLICY_NAME}`]] },
                ]);
            }
        }
    }
    getVpcConfig() {
        const { subnetIds } = this.vpc.selectSubnets(this.subnetSelection);
        return {
            SecurityGroupIds: [this.securityGroup].map(sg => sg.securityGroupId),
            SubnetIds: subnetIds,
        };
    }
    mapToString(it) {
        if (typeof it === 'object') {
            return Object.values(it)[0] || '';
        }
        else {
            return it;
        }
    }
}
exports.LambdaVPCAspect = LambdaVPCAspect;
LambdaVPCAspect.LAMBDA_VPC_MANAGED_POLICY_NAME = 'service-role/AWSLambdaVPCAccessExecutionRole';
LambdaVPCAspect.LAMBDA_BASIC_MANAGED_POLICY_NAME = 'service-role/AWSLambdaBasicExecutionRole';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LWxhbWJkYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFzcGVjdC1sYW1iZGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW1EO0FBRW5ELGlEQUFtRTtBQUNuRSx1REFBcUQ7QUFHckQ7Ozs7O0dBS0c7QUFDSCxNQUFhLGVBQWU7SUFJMUIsWUFBb0IsR0FBUyxFQUFVLGFBQTRCLEVBQVUsZUFBaUM7UUFBMUYsUUFBRyxHQUFILEdBQUcsQ0FBTTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWtCO0lBRTlHLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxJQUFnQjtRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxJQUE0QztRQUNoRSxJQUFJLHlCQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksdUJBQXVCLEVBQUU7WUFDdEYsSUFBSSxJQUFJLFlBQVksd0JBQVcsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7aUJBQzVEO2FBQ0Y7aUJBQU07Z0JBQ0wsYUFBYTtnQkFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7b0JBQ2pDLGFBQWE7b0JBQ2IsSUFBSSxDQUFDLGNBQWMsbUNBRWQsSUFBSSxDQUFDLGFBQWEsS0FDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FDL0IsQ0FBQztpQkFDSDthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLElBQXFDOztRQUNyRCxJQUFJLElBQUksWUFBWSxjQUFJLEVBQUU7WUFDeEIsSUFBSyxJQUFZLENBQUMsZUFBZTtpQkFDOUIsSUFBSSxDQUFDLENBQUMsRUFBZ0MsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxFQUMzSDtnQkFDQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxlQUFlLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO2FBQy9HO1NBQ0Y7YUFBTSxJQUFJLHlCQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksaUJBQU8sQ0FBQyxzQkFBc0IsRUFBRTtZQUNwRyxNQUFNLFdBQVcsR0FBSSxJQUFZLENBQUMsY0FBYyxDQUFDLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztZQUN6RSxNQUFNLGtCQUFrQixHQUFHLE1BQUEsV0FBVztpQkFDbkMsR0FBRyxDQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLDBDQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlGLElBQUksa0JBQWtCLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsRUFBRTtvQkFDNUMsR0FBRyxXQUFXO29CQUNkLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsb0JBQW9CLGVBQWUsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLENBQUMsRUFBRTtpQkFDaEksQ0FBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUM7SUFFTyxZQUFZO1FBQ2xCLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkUsT0FBTztZQUNMLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDcEUsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFFTyxXQUFXLENBQUMsRUFBTztRQUN6QixJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUMxQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFXLElBQUksRUFBRSxDQUFDO1NBQzdDO2FBQU07WUFDTCxPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQzs7QUF4RUgsMENBeUVDO0FBeEVpQiw4Q0FBOEIsR0FBVyw4Q0FBOEMsQ0FBQztBQUN4RixnREFBZ0MsR0FBVywwQ0FBMEMsQ0FBQyJ9