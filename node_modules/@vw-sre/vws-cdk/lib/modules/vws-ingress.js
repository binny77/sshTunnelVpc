"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VwsIngress = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_elasticloadbalancingv2_1 = require("aws-cdk-lib/aws-elasticloadbalancingv2");
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const constructs_1 = require("constructs");
const cfn_login_client_1 = require("../vws/cfn-login-client");
/**
 * VwsIngress construct
 *
 * Creates:
 * - log s3 Bucket for LoadBalancer logs
 * - security group for the LoadBalancer
 * - LoadBalancer
 * - LoadBalancer Listener with or without KUMS login protection
 * - Loadbalancer alias in a given domain
 *
 * @deprecated
 * @see https://github.com/vw-sre/vws-cdk/tree/main/lib/modules/vws-ingress-V2.ts
 */
class VwsIngress extends constructs_1.Construct {
    constructor(scope, id, props) {
        var _a, _b;
        super(scope, id);
        const logBucket = new aws_s3_1.Bucket(this, 'LogBucket', {
            encryption: aws_s3_1.BucketEncryption.KMS_MANAGED,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            lifecycleRules: [
                {
                    id: '1',
                    expiration: props.logRetention,
                    enabled: true,
                },
                {
                    id: '2',
                    abortIncompleteMultipartUploadAfter: aws_cdk_lib_1.Duration.days(3),
                    enabled: true,
                },
            ],
        });
        this.securityGroup = new aws_ec2_1.SecurityGroup(this, 'SecurityGroup', {
            vpc: props.vpc,
            allowAllOutbound: true,
        });
        this.securityGroup.addIngressRule(aws_ec2_1.Peer.anyIpv4(), aws_ec2_1.Port.tcp(80));
        this.securityGroup.addIngressRule(aws_ec2_1.Peer.anyIpv4(), aws_ec2_1.Port.tcp(443));
        this.loadBalancer = new aws_elasticloadbalancingv2_1.ApplicationLoadBalancer(this, 'LoadBalancer', {
            vpc: props.vpc,
            internetFacing: true,
            securityGroup: this.securityGroup,
            vpcSubnets: props.vpcSubnets,
            idleTimeout: aws_cdk_lib_1.Duration.seconds(10),
        });
        this.loadBalancer.logAccessLogs(logBucket, 'access-logs');
        this.loadBalancer.setAttribute('routing.http.drop_invalid_header_fields.enabled', 'true');
        this.loadBalancer.addRedirect({
            sourcePort: 80,
            sourceProtocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
            targetPort: 443,
            targetProtocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        });
        const weight = Math.floor(100 / props.targetGroups.length);
        const weightedTargetGroups = props.targetGroups.map((targetGroup) => ({
            targetGroup,
            weight,
        }));
        const listenerProps = {
            certificates: props.certificates,
            loadBalancer: this.loadBalancer,
            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
            port: 443,
            sslPolicy: aws_elasticloadbalancingv2_1.SslPolicy.FORWARD_SECRECY_TLS12_RES_GCM,
        };
        if (props.includeLogin) {
            const callbackUrls = (_b = (_a = props.additionalIdpCallbackUrls) === null || _a === void 0 ? void 0 : _a.map(url => url + '/oauth2/idpresponse')) !== null && _b !== void 0 ? _b : [];
            const loginClient = new cfn_login_client_1.CfnLoginClient(this, 'PlatformLogin', {
                callbackUrl: [
                    ...callbackUrls,
                    `https://${props.domain.name}/oauth2/idpresponse`,
                ],
            });
            this.applicationListener = new aws_elasticloadbalancingv2_1.ApplicationListener(this, 'HttpsListenerV2', Object.assign(Object.assign({}, listenerProps), { defaultAction: aws_elasticloadbalancingv2_1.ListenerAction.authenticateOidc({
                    authenticationRequestExtraParams: {
                        display: 'page',
                        prompt: 'login',
                    },
                    authorizationEndpoint: loginClient.authorizationEndpoint,
                    clientId: aws_cdk_lib_1.SecretValue.secretsManager(loginClient.secretArn, {
                        jsonField: 'client_id',
                    }).toString(),
                    clientSecret: aws_cdk_lib_1.SecretValue.secretsManager(loginClient.secretArn, {
                        jsonField: 'client_secret',
                    }),
                    issuer: loginClient.issuer,
                    scope: 'openid profile email',
                    sessionCookieName: 'x-session',
                    sessionTimeout: aws_cdk_lib_1.Duration.seconds(28800),
                    tokenEndpoint: loginClient.tokenEndpoint,
                    userInfoEndpoint: loginClient.userInfoEndpoint,
                    onUnauthenticatedRequest: aws_elasticloadbalancingv2_1.UnauthenticatedAction.AUTHENTICATE,
                    next: aws_elasticloadbalancingv2_1.ListenerAction.weightedForward(weightedTargetGroups),
                }) }));
        }
        else {
            this.applicationListener = new aws_elasticloadbalancingv2_1.ApplicationListener(this, 'HttpsListenerV2', Object.assign(Object.assign({}, listenerProps), { defaultAction: aws_elasticloadbalancingv2_1.ListenerAction.weightedForward(weightedTargetGroups) }));
        }
        new aws_route53_1.CfnRecordSet(this, 'LoadBalancerAlias', {
            name: `${props.domain.name}.`,
            type: 'A',
            aliasTarget: {
                dnsName: `dualstack.${this.loadBalancer.loadBalancerDnsName}`,
                hostedZoneId: this.loadBalancer.loadBalancerCanonicalHostedZoneId,
            },
            hostedZoneId: props.domain.hostedZone.hostedZoneId,
        });
        new aws_route53_1.CfnRecordSet(this, 'LoadBalancerAaaaAlias', {
            name: `${props.domain.name}.`,
            type: 'AAAA',
            aliasTarget: {
                dnsName: `dualstack.${this.loadBalancer.loadBalancerDnsName}`,
                hostedZoneId: this.loadBalancer.loadBalancerCanonicalHostedZoneId,
            },
            hostedZoneId: props.domain.hostedZone.hostedZoneId,
        });
    }
}
exports.VwsIngress = VwsIngress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidndzLWluZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2d3MtaW5ncmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0Q7QUFFcEQsaURBQXVGO0FBQ3ZGLHVGQVNnRDtBQUNoRCx5REFBdUQ7QUFDdkQsK0NBQWlGO0FBQ2pGLDJDQUF1QztBQUN2Qyw4REFBeUQ7QUE0Q3pEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQWEsVUFBVyxTQUFRLHNCQUFTO0lBWXZDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMkI7O1FBQ25FLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUM5QyxVQUFVLEVBQUUseUJBQWdCLENBQUMsV0FBVztZQUN4QyxpQkFBaUIsRUFBRSwwQkFBaUIsQ0FBQyxTQUFTO1lBQzlDLGNBQWMsRUFBRTtnQkFDZDtvQkFDRSxFQUFFLEVBQUUsR0FBRztvQkFDUCxVQUFVLEVBQUUsS0FBSyxDQUFDLFlBQVk7b0JBQzlCLE9BQU8sRUFBRSxJQUFJO2lCQUNkO2dCQUNEO29CQUNFLEVBQUUsRUFBRSxHQUFHO29CQUNQLG1DQUFtQyxFQUFFLHNCQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDckQsT0FBTyxFQUFFLElBQUk7aUJBQ2Q7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSx1QkFBYSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUU7WUFDNUQsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsZ0JBQWdCLEVBQUUsSUFBSTtTQUN2QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxjQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsY0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FB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