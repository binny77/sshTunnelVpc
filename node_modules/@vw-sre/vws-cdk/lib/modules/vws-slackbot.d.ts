import { Stack } from 'aws-cdk-lib';
import { RuleProps } from 'aws-cdk-lib/aws-events';
import { ISecret } from 'aws-cdk-lib/aws-secretsmanager';
import { Construct } from 'constructs';
export declare type VwsSlackbotProps = {
    /**
     * Channel name to post in, for example: #iteration-alerts.
     */
    slackChannel: string;
    /**
     * ARN of plain-text secret containing slack Webhook URL for your channel.
     */
    webhookSecret: ISecret;
    /**
     * Name used in the Slack post, for example: CodePipeline Tools Account.
     *
     * @default - 'VWS Slack Bot'
     */
    slackUser?: string;
    /**
     * The conditions when a message should be sent to Slack and the message description.
     *
     * @example
     * {
     *   event: {
     *     description: 'EventRule',
     *     eventPattern: {
     *       detail: {
     *         state: ['FAILED'],
     *       },
     *       detailType: ['CodePipeline Pipeline Execution State Change'],
     *       source: ['aws.codepipeline'],
     *     },
     *   },
     *   message: {
     *     title: `CodePipeline ${EventField.fromPath('$.detail.state')}`,
     *     color: SlackbotColor.RED,
     *     fields: [{
     *       title: 'Pipeline',
     *       value: EventField.fromPath('$.detail.pipeline'),
     *       short: false,
     *     }, {
     *       title: 'Account',
     *       value: EventField.account,
     *       short: true,
     *     }, {
     *       title: 'Region',
     *       value: EventField.region,
     *       short: true,
     *     }],
     *   },
     * }
     */
    conditions: SlackbotCondition[];
    /**
     * @example 'http://username:password@proxy.resources.vwapps.cloud:8080'
     */
    proxyUrl: string;
};
export declare type SlackbotCondition = {
    /**
     * The conditions when a message should be send to Slack
     */
    event: RuleProps;
    /**
     * The message description.
     *
     * This is used as attachment in RuleTargetInput.fromObject.
     */
    message: SlackMessageAttachment;
};
export declare type SlackMessageAttachment = {
    color?: 'good' | 'warning' | 'danger' | string;
    title?: string;
    fields?: {
        title: string;
        value: string;
        short?: boolean;
    }[];
    [key: string]: any;
};
/**
 * @experimental
 */
export declare class VwsSlackbot extends Construct {
    protected readonly scope: Stack;
    protected readonly id: string;
    static createPipelineFailedCondition(): SlackbotCondition;
    static createAlarmCondition(alarmName: string): SlackbotCondition;
    constructor(scope: Stack, id: string, props: VwsSlackbotProps);
}
