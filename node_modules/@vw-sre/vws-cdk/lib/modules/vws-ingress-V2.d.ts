import { Duration } from 'aws-cdk-lib';
import { ICertificate } from 'aws-cdk-lib/aws-certificatemanager';
import { IVpc, SecurityGroup } from 'aws-cdk-lib/aws-ec2';
import { ApplicationListener, ApplicationLoadBalancer, IApplicationTargetGroup, ListenerCondition } from 'aws-cdk-lib/aws-elasticloadbalancingv2';
import { Construct } from 'constructs';
import { CfnLoginClient } from '../vws/cfn-login-client';
import { IDomain } from '../vws/domain';
export interface DefaultIngressTargetGroup {
    readonly targetGroup: IApplicationTargetGroup;
    readonly includeLogin: boolean;
}
export interface IngressTargetGroup {
    readonly targetGroup: IApplicationTargetGroup;
    readonly includeLogin: boolean;
    readonly conditions?: ListenerCondition[];
    /**
     * Priority of this target group.
     * The rule with the lowest priority will be used for every request. If priority is not given, these target groups will be added as defaults, and must not have conditions.
     * Priorities must be unique.
     */
    readonly priority: number;
}
/**
 * Properties for VwsIngress construct
 */
export interface VwsIngressV2Properties {
    /**
     * vpc for the LoadBalancer
     */
    readonly vpc: IVpc;
    /**
     * a vws domain
     */
    readonly domain: IDomain;
    /**
     * certificate for https
     */
    readonly certificates: ICertificate[];
    /**
     * Loadbalancer target group eg. a Lambda function
     */
    readonly targetGroup?: DefaultIngressTargetGroup;
    /**
     * Loadbalancer target group eg. a Lambda function
     */
    readonly additionalTargetGroups?: IngressTargetGroup[];
    /**
     * retention time of logs in s3 bucket
     * duration should be days
     * @default 3 days
     */
    readonly logRetention?: Duration;
    /**
     * for e.g. VWS1.0 routes
     */
    readonly additionalIdpCallbackUrls?: string[];
    /**
     * Idle timeout used in the ApplicationLoadBalancer.
     * Defaults to 10 seconds in this module.
     */
    readonly loadBalancerIdleTimeout?: Duration;
    /**
     * list of allowed logout redirect urls when using authentication
     */
    readonly logoutUrl?: string[];
    /**
     * Supply this if you want to use a weighted RecordSet
     * Otherwise a simple RecordSet will be used
     */
    readonly recordSetWeight?: number;
}
/**
 * VwsIngress construct
 *
 * Creates:
 * - log s3 Bucket for LoadBalancer logs
 * - security group for the LoadBalancer
 * - LoadBalancer
 * - LoadBalancer Listener with or without KUMS login protection
 * - Loadbalancer alias in a given domain
 */
export declare class VwsIngressV2 extends Construct {
    private static getAuthenticateOidc;
    readonly loadBalancer: ApplicationLoadBalancer;
    /**
     * The SecurityGroup attached to the LoadBalancer
     */
    readonly securityGroup: SecurityGroup;
    /**
     * The ApplicationListener which associates the TargetGroup with the LoadBalancer.
     * Only present after setting the default target group.
     */
    applicationListener?: ApplicationListener;
    /**
     * The VWS:Login:Client used for authentication if enabled
     */
    loginClient?: CfnLoginClient;
    private additionalIdpCallbackUrls?;
    private readonly domainName;
    private readonly logoutUrls;
    private readonly certificates;
    private defaultTargetGroupSet;
    constructor(scope: Construct, id: string, props: VwsIngressV2Properties);
    setDefaultTargetGroup(props: DefaultIngressTargetGroup): void;
    addAdditionalTargetGroup(additionalTargetGroup: IngressTargetGroup): void;
    private createLoginClient;
}
