"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VwsIngressV2 = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_elasticloadbalancingv2_1 = require("aws-cdk-lib/aws-elasticloadbalancingv2");
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const constructs_1 = require("constructs");
const cfn_login_client_1 = require("../vws/cfn-login-client");
/**
 * VwsIngress construct
 *
 * Creates:
 * - log s3 Bucket for LoadBalancer logs
 * - security group for the LoadBalancer
 * - LoadBalancer
 * - LoadBalancer Listener with or without KUMS login protection
 * - Loadbalancer alias in a given domain
 */
class VwsIngressV2 extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.defaultTargetGroupSet = false;
        this.certificates = props.certificates;
        const logBucket = new aws_s3_1.Bucket(this, 'LogBucket', {
            encryption: aws_s3_1.BucketEncryption.S3_MANAGED,
            lifecycleRules: [
                {
                    id: '1',
                    expiration: props.logRetention ? props.logRetention : aws_cdk_lib_1.Duration.days(3),
                    enabled: true,
                },
                {
                    id: '2',
                    abortIncompleteMultipartUploadAfter: aws_cdk_lib_1.Duration.days(3),
                    enabled: true,
                },
            ],
            accessControl: aws_s3_1.BucketAccessControl.LOG_DELIVERY_WRITE,
        });
        this.securityGroup = new aws_ec2_1.SecurityGroup(this, 'SecurityGroup', {
            vpc: props.vpc,
            allowAllOutbound: true,
        });
        this.securityGroup.addIngressRule(aws_ec2_1.Peer.anyIpv4(), aws_ec2_1.Port.tcp(80));
        this.securityGroup.addIngressRule(aws_ec2_1.Peer.anyIpv4(), aws_ec2_1.Port.tcp(443));
        this.loadBalancer = new aws_elasticloadbalancingv2_1.ApplicationLoadBalancer(this, 'LoadBalancer', {
            vpc: props.vpc,
            internetFacing: true,
            securityGroup: this.securityGroup,
            idleTimeout: props.loadBalancerIdleTimeout || aws_cdk_lib_1.Duration.seconds(10),
        });
        this.loadBalancer.logAccessLogs(logBucket, 'access-logs');
        this.loadBalancer.setAttribute('routing.http.drop_invalid_header_fields.enabled', 'true');
        this.loadBalancer.addRedirect({
            sourcePort: 80,
            sourceProtocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTP,
            targetPort: 443,
            targetProtocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
        });
        this.additionalIdpCallbackUrls = props.additionalIdpCallbackUrls;
        this.domainName = props.domain.name;
        this.logoutUrls = props.logoutUrl;
        if (props.targetGroup) {
            this.setDefaultTargetGroup(props.targetGroup);
        }
        if (props.additionalTargetGroups) {
            for (let additionalTargetGroup of props.additionalTargetGroups) {
                this.addAdditionalTargetGroup(additionalTargetGroup);
            }
        }
        new aws_route53_1.CfnRecordSet(this, 'LoadBalancerAlias', {
            name: `${props.domain.name}.`,
            type: 'A',
            aliasTarget: {
                dnsName: `dualstack.${this.loadBalancer.loadBalancerDnsName}`,
                hostedZoneId: this.loadBalancer.loadBalancerCanonicalHostedZoneId,
            },
            hostedZoneId: props.domain.hostedZone.hostedZoneId,
            setIdentifier: props.recordSetWeight === undefined ? undefined : this.node.addr,
            weight: props.recordSetWeight === undefined ? undefined : props.recordSetWeight,
        });
        new aws_route53_1.CfnRecordSet(this, 'LoadBalancerAaaaAlias', {
            name: `${props.domain.name}.`,
            type: 'AAAA',
            aliasTarget: {
                dnsName: `dualstack.${this.loadBalancer.loadBalancerDnsName}`,
                hostedZoneId: this.loadBalancer.loadBalancerCanonicalHostedZoneId,
            },
            hostedZoneId: props.domain.hostedZone.hostedZoneId,
            setIdentifier: props.recordSetWeight === undefined ? undefined : this.node.addr,
            weight: props.recordSetWeight === undefined ? undefined : props.recordSetWeight,
        });
        this.node.addValidation({
            validate: () => {
                if (!this.defaultTargetGroupSet) {
                    return ['No default target group set'];
                }
                else {
                    return [];
                }
            },
        });
    }
    static getAuthenticateOidc(loginClient, targetGroup, workaround) {
        if (targetGroup.includeLogin) {
            const action = aws_elasticloadbalancingv2_1.ListenerAction.authenticateOidc({
                authenticationRequestExtraParams: {
                    display: 'page',
                    prompt: 'login',
                },
                authorizationEndpoint: loginClient.authorizationEndpoint,
                clientId: aws_cdk_lib_1.SecretValue.secretsManager(loginClient.secretArn, {
                    jsonField: 'client_id',
                }).unsafeUnwrap(),
                clientSecret: aws_cdk_lib_1.SecretValue.secretsManager(loginClient.secretArn, {
                    jsonField: 'client_secret',
                }),
                issuer: loginClient.issuer,
                scope: 'openid profile email',
                sessionCookieName: 'x-session',
                sessionTimeout: workaround ? undefined : aws_cdk_lib_1.Duration.seconds(28800),
                tokenEndpoint: loginClient.tokenEndpoint,
                userInfoEndpoint: loginClient.userInfoEndpoint,
                onUnauthenticatedRequest: aws_elasticloadbalancingv2_1.UnauthenticatedAction.AUTHENTICATE,
                next: aws_elasticloadbalancingv2_1.ListenerAction.forward([targetGroup.targetGroup]),
            });
            // https://github.com/aws/aws-cdk/issues/12843
            if (workaround) {
                // @ts-ignore
                action.actionJson.authenticateOidcConfig.sessionTimeout = 28800;
            }
            return action;
        }
        else {
            return aws_elasticloadbalancingv2_1.ListenerAction.forward([targetGroup.targetGroup]);
        }
    }
    setDefaultTargetGroup(props) {
        if (this.defaultTargetGroupSet) {
            throw new Error('Default target group already set');
        }
        this.defaultTargetGroupSet = true;
        if (props.includeLogin && !this.loginClient) {
            this.loginClient = this.createLoginClient();
        }
        this.applicationListener = this.loadBalancer.addListener('HttpsListenerV2', {
            certificates: this.certificates,
            protocol: aws_elasticloadbalancingv2_1.ApplicationProtocol.HTTPS,
            sslPolicy: aws_elasticloadbalancingv2_1.SslPolicy.FORWARD_SECRECY_TLS12_RES_GCM,
            defaultAction: VwsIngressV2.getAuthenticateOidc(this.loginClient, props, false),
        });
    }
    addAdditionalTargetGroup(additionalTargetGroup) {
        if (!this.defaultTargetGroupSet) {
            throw new Error('Cannot add additional target group without default target group');
        }
        if (additionalTargetGroup.includeLogin && !this.loginClient) {
            this.loginClient = this.createLoginClient();
        }
        const listenerAction = VwsIngressV2.getAuthenticateOidc(this.loginClient, additionalTargetGroup, true);
        new aws_elasticloadbalancingv2_1.ApplicationListenerRule(this, 'Rule' + additionalTargetGroup.priority, {
            action: listenerAction,
            listener: this.applicationListener,
            conditions: additionalTargetGroup.conditions,
            priority: additionalTargetGroup.priority,
        });
    }
    createLoginClient() {
        var _a, _b;
        const callbackUrls = (_b = (_a = this.additionalIdpCallbackUrls) === null || _a === void 0 ? void 0 : _a.map(url => url + '/oauth2/idpresponse')) !== null && _b !== void 0 ? _b : [];
        return new cfn_login_client_1.CfnLoginClient(this, 'PlatformLogin', {
            callbackUrl: [
                ...callbackUrls,
                `https://${this.domainName}/oauth2/idpresponse`,
            ],
            logoutUrl: this.logoutUrls,
        });
    }
}
exports.VwsIngressV2 = VwsIngressV2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidndzLWluZ3Jlc3MtVjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2d3MtaW5ncmVzcy1WMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0Q7QUFFcEQsaURBQXNFO0FBQ3RFLHVGQVVnRDtBQUNoRCx5REFBdUQ7QUFDdkQsK0NBQW1GO0FBQ25GLDJDQUF1QztBQUN2Qyw4REFBeUQ7QUF3RXpEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsWUFBYSxTQUFRLHNCQUFTO0lBMkR6QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTZCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFIWCwwQkFBcUIsR0FBWSxLQUFLLENBQUM7UUFJN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBRXZDLE1BQU0sU0FBUyxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDOUMsVUFBVSxFQUFFLHlCQUFnQixDQUFDLFVBQVU7WUFDdkMsY0FBYyxFQUFFO2dCQUNkO29CQUNFLEVBQUUsRUFBRSxHQUFHO29CQUNQLFVBQVUsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxzQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3RFLE9BQU8sRUFBRSxJQUFJO2lCQUNkO2dCQUNEO29CQUNFLEVBQUUsRUFBRSxHQUFHO29CQUNQLG1DQUFtQyxFQUFFLHNCQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDckQsT0FBTyxFQUFFLElBQUk7aUJBQ2Q7YUFDRjtZQUNELGFBQWEsRUFBRSw0QkFBbUIsQ0FBQyxrQkFBa0I7U0FDdEQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHVCQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUM1RCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxnQkFBZ0IsRUFBRSxJQUFJO1NBQ3ZCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLGNBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxjQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsY0FBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLGNBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVqRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksb0RBQXVCLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNwRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxjQUFjLEVBQUUsSUFBSTtZQUNwQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsV0FBVyxFQUFFLEtBQUssQ0FBQyx1QkFBdUIsSUFBSSxzQkFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDbkUsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGlEQUFpRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTFGLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQzVCLFVBQVUsRUFBRSxFQUFFO1lBQ2QsY0FBYyxFQUFFLGdEQUFtQixDQUFDLElBQUk7WUFDeEMsVUFBVSxFQUFFLEdBQUc7WUFDZixjQUFjLEVBQUUsZ0RBQW1CLENBQUMsS0FBSztTQUMxQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMseUJBQXlCLEdBQUcsS0FBSyxDQUFDLHlCQUF5QixDQUFDO1FBQ2pFLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBRWxDLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFdBQVksQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUU7WUFDaEMsS0FBSyxJQUFJLHFCQUFxQixJQUFJLEtBQUssQ0FBQyxzQkFBc0IsRUFBRTtnQkFDOUQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLENBQUM7YUFDdEQ7U0FDRjtRQUVELElBQUksMEJBQVksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7WUFDMUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUc7WUFDN0IsSUFBSSxFQUFFLEdBQUc7WUFDVCxXQUFXLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLGFBQWEsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDN0QsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsaUNBQWlDO2FBQ2xFO1lBQ0QsWUFBWSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVk7WUFDbEQsYUFBYSxFQUFFLEtBQUssQ0FBQyxlQUFlLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUMvRSxNQUFNLEVBQUUsS0FBSyxDQUFDLGVBQWUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWU7U0FDaEYsQ0FBQyxDQUFDO1FBQ0gsSUFBSSwwQkFBWSxDQUFDLElBQUksRUFBRSx1QkFBdUIsRUFBRTtZQUM5QyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRztZQUM3QixJQUFJLEVBQUUsTUFBTTtZQUNaLFdBQVcsRUFBRTtnQkFDWCxPQUFPLEVBQUUsYUFBYSxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFO2dCQUM3RCxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUM7YUFDbEU7WUFDRCxZQUFZLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWTtZQUNsRCxhQUFhLEVBQUUsS0FBSyxDQUFDLGVBQWUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQy9FLE1BQU0sRUFBRSxLQUFLLENBQUMsZUFBZSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZTtTQUNoRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUN0QixRQUFRLEVBQUUsR0FBRyxFQUFFO2dCQUNiLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7b0JBQy9CLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO2lCQUN4QztxQkFBTTtvQkFDTCxPQUFPLEVBQUUsQ0FBQztpQkFDWDtZQUNILENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBcEpPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUEyQixFQUFFLFdBQTJELEVBQUUsVUFBbUI7UUFDOUksSUFBSSxXQUFXLENBQUMsWUFBWSxFQUFFO1lBQzVCLE1BQU0sTUFBTSxHQUFHLDJDQUFjLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzdDLGdDQUFnQyxFQUFFO29CQUNoQyxPQUFPLEVBQUUsTUFBTTtvQkFDZixNQUFNLEVBQUUsT0FBTztpQkFDaEI7Z0JBQ0QscUJBQXFCLEVBQUUsV0FBVyxDQUFDLHFCQUFxQjtnQkFDeEQsUUFBUSxFQUFFLHlCQUFXLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7b0JBQzFELFNBQVMsRUFBRSxXQUFXO2lCQUN2QixDQUFDLENBQUMsWUFBWSxFQUFFO2dCQUNqQixZQUFZLEVBQUUseUJBQVcsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRTtvQkFDOUQsU0FBUyxFQUFFLGVBQWU7aUJBQzNCLENBQUM7Z0JBQ0YsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2dCQUMxQixLQUFLLEVBQUUsc0JBQXNCO2dCQUM3QixpQkFBaUIsRUFBRSxXQUFXO2dCQUM5QixjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHNCQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDaEUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhO2dCQUN4QyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsZ0JBQWdCO2dCQUM5Qyx3QkFBd0IsRUFBRSxrREFBcUIsQ0FBQyxZQUFZO2dCQUM1RCxJQUFJLEVBQUUsMkNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEQsQ0FDQSxDQUFDO1lBQ0YsOENBQThDO1lBQzlDLElBQUksVUFBVSxFQUFFO2dCQUNkLGFBQWE7Z0JBQ2IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO2FBQ2pFO1lBQ0QsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTywyQ0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQXFITSxxQkFBcUIsQ0FBQyxLQUFnQztRQUMzRCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1FBRWxDLElBQUcsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUM7WUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtTQUM1QztRQUVELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtZQUMxRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsUUFBUSxFQUFFLGdEQUFtQixDQUFDLEtBQUs7WUFDbkMsU0FBUyxFQUFFLHNDQUFTLENBQUMsNkJBQTZCO1lBQ2xELGFBQWEsRUFBRSxZQUFZLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO1NBQ2pGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSx3QkFBd0IsQ0FBQyxxQkFBeUM7UUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7U0FDcEY7UUFFRCxJQUFHLHFCQUFxQixDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUM7WUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtTQUM1QztRQUVELE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBWSxFQUFFLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hHLElBQUksb0RBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUU7WUFDekUsTUFBTSxFQUFFLGNBQWM7WUFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxtQkFBb0I7WUFDbkMsVUFBVSxFQUFFLHFCQUFxQixDQUFDLFVBQVU7WUFDNUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLFFBQVE7U0FDekMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGlCQUFpQjs7UUFDdkIsTUFBTSxZQUFZLEdBQUcsTUFBQSxNQUFBLElBQUksQ0FBQyx5QkFBeUIsMENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLHFCQUFxQixDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUNuRyxPQUFPLElBQUksaUNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQy9DLFdBQVcsRUFBRTtnQkFDWCxHQUFHLFlBQVk7Z0JBQ2YsV0FBVyxJQUFJLENBQUMsVUFBVSxxQkFBcUI7YUFDaEQ7WUFDRCxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBck1ELG9DQXFNQyJ9