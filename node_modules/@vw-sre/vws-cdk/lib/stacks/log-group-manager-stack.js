"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogGroupManagerDeploymentPolicy = exports.LogGroupManagerStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_sam_1 = require("aws-cdk-lib/aws-sam");
const cfn_shared_vpc_1 = require("../vws/cfn-shared-vpc");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
class LogGroupManagerStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        var _a, _b;
        super(scope, id, props);
        const vpc = (props === null || props === void 0 ? void 0 : props.vpc) ?
            props.vpc :
            new cfn_shared_vpc_1.CfnSharedVpc(this, 'SharedVpc').vpc(this.availabilityZones);
        if (vpc.isolatedSubnets.length == 0) {
            throw new Error('Vpc needs at least one isolated subnet');
        }
        const regionTable = new aws_cdk_lib_1.CfnMapping(this, 'Regions', {
            mapping: {
                'us-west-2': {
                    id: 'arn:aws:serverlessrepo:us-west-2:637378239786:applications/vws-aws-log-group-manager',
                },
                'us-east-1': {
                    id: 'arn:aws:serverlessrepo:us-east-1:637378239786:applications/vws-aws-log-group-manager',
                },
                'eu-west-1': {
                    id: 'arn:aws:serverlessrepo:eu-west-1:637378239786:applications/vws-aws-log-group-manager',
                },
                'eu-central-1': {
                    id: 'arn:aws:serverlessrepo:eu-central-1:637378239786:applications/vws-aws-log-group-manager',
                },
                'ap-south-1': {
                    id: 'arn:aws:serverlessrepo:ap-south-1:637378239786:applications/vws-aws-log-group-manager',
                },
                'ap-southeast-1': {
                    id: 'arn:aws:serverlessrepo:ap-southeast-1:637378239786:applications/vws-aws-log-group-manager',
                },
                'ap-northeast-2': {
                    id: 'arn:aws:serverlessrepo:ap-northeast-2:637378239786:applications/vws-aws-log-group-manager',
                },
            },
        });
        new aws_sam_1.CfnApplication(this, 'LogGroupManager', {
            location: {
                applicationId: regionTable.findInMap(aws_cdk_lib_1.Aws.REGION, 'id'),
                semanticVersion: '0.1.6',
            },
            parameters: {
                VpcId: vpc.vpcId,
                SubnetId: vpc.isolatedSubnets[0].subnetId,
                LogRetentionPeriod: (_b = (_a = props === null || props === void 0 ? void 0 : props.logRetentionPeriod) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : String(aws_logs_1.RetentionDays.THREE_MONTHS),
            },
        });
    }
}
exports.LogGroupManagerStack = LogGroupManagerStack;
class LogGroupManagerDeploymentPolicy extends aws_iam_1.ManagedPolicy {
    constructor(scope, id, props) {
        const policyProps = {
            managedPolicyName: props.managedPolicyName,
            statements: [
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ec2:CreateSecurityGroup',
                        'ec2:DescribeSecurityGroups',
                        'ec2:DescribeSubnets',
                        'ec2:DescribeVpcs',
                        'ec2:createTags',
                    ],
                    // no resource restrictions possible
                    resources: ['*'],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ec2:AuthorizeSecurityGroupEgress',
                        'ec2:DeleteSecurityGroup',
                        'ec2:RevokeSecurityGroupEgress',
                    ],
                    // security group id is not known
                    resources: [`arn:aws:ec2:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'cloudformation:DescribeStacks',
                        'cloudformation:CreateChangeSet',
                        'cloudformation:DescribeChangeSet',
                        'cloudformation:ExecuteChangeSet',
                        'cloudformation:GetTemplateSummary',
                        'cloudformation:DeleteStack',
                        'cloudformation:CreateStack',
                        'cloudformation:UpdateStack',
                    ],
                    resources: [
                        `arn:aws:cloudformation:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:stack/${props.stackName}*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'cloudformation:CreateChangeSet',
                    ],
                    resources: [
                        `arn:aws:cloudformation:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:aws:transform/Serverless-*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'serverlessrepo:CreateCloudFormationTemplate',
                        'serverlessrepo:GetCloudFormationTemplate',
                    ],
                    resources: [
                        `arn:aws:serverlessrepo:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:637378239786:applications/vws-aws-log-group-manager`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ssm:GetParameters',
                    ],
                    resources: [`arn:aws:ssm:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:parameter/cdk-bootstrap/*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'iam:CreateRole',
                        'iam:GetRole',
                        'iam:DeleteRole',
                        'iam:AttachRolePolicy',
                        'iam:DetachRolePolicy',
                        'iam:PassRole',
                    ],
                    resources: [`arn:aws:iam::${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:role/${props.stackName}*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'iam:CreatePolicy',
                        'iam:GetPolicy',
                        'iam:ListPolicyVersions',
                        'iam:DeletePolicy',
                    ],
                    resources: [`arn:aws:iam::${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:policy/${props.stackName}*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'events:PutRule',
                        'events:PutTargets',
                        'events:RemoveTargets',
                        'events:DeleteRule',
                        'events:DescribeRule',
                    ],
                    resources: [`arn:aws:events:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:rule/${props.stackName}*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'kms:CreateKey',
                        'kms:TagResource',
                        'kms:PutKeyPolicy',
                        'kms:EnableKeyRotation',
                        'kms:DescribeKey',
                        'kms:CreateAlias',
                        'kms:DeleteAlias',
                    ],
                    resources: ['*'],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'lambda:CreateFunction',
                        'lambda:CreateAlias',
                        'lambda:DeleteFunction',
                        'lambda:DeleteAlias',
                        'lambda:PutFunctionConcurrency',
                        'lambda:GetFunction',
                        'lambda:RemovePermission',
                        'lambda:ListVersionsByFunction',
                        'lambda:PublishVersion',
                        'lambda:AddPermission',
                    ],
                    resources: [
                        `arn:aws:lambda:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:function:${props.stackName}*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        's3:GetObject',
                    ],
                    resources: [
                        'arn:aws:s3:::awsserverlessrepo-changesets*/*',
                    ],
                }),
            ],
        };
        super(scope, id, policyProps);
    }
}
exports.LogGroupManagerDeploymentPolicy = LogGroupManagerDeploymentPolicy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLWdyb3VwLW1hbmFnZXItc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2ctZ3JvdXAtbWFuYWdlci1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0U7QUFFcEUsaURBQWdHO0FBQ2hHLGlEQUFvRDtBQUVwRCwwREFBb0Q7QUFDcEQsbURBQW9EO0FBT3BELE1BQWEsb0JBQXFCLFNBQVEsbUJBQUs7SUFDN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQzs7UUFDekUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxHQUFHLEdBQUcsQ0FBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsR0FBRyxFQUFDLENBQUM7WUFDdEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsSUFBSSw2QkFBWSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFbEUsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSx3QkFBVSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDbEQsT0FBTyxFQUFFO2dCQUNQLFdBQVcsRUFBRTtvQkFDWCxFQUFFLEVBQUUsc0ZBQXNGO2lCQUMzRjtnQkFDRCxXQUFXLEVBQUU7b0JBQ1gsRUFBRSxFQUFFLHNGQUFzRjtpQkFDM0Y7Z0JBQ0QsV0FBVyxFQUFFO29CQUNYLEVBQUUsRUFBRSxzRkFBc0Y7aUJBQzNGO2dCQUNELGNBQWMsRUFBRTtvQkFDZCxFQUFFLEVBQUUseUZBQXlGO2lCQUM5RjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osRUFBRSxFQUFFLHVGQUF1RjtpQkFD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