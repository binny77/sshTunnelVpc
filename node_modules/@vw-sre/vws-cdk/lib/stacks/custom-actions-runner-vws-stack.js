"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomActionsRunnerVwsStack = exports.CustomActionsRunnerVwsStackDeploymentPolicy = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const ecs = require("aws-cdk-lib/aws-ecs");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const cfn_proxy_1 = require("../vws/cfn-proxy");
const cfn_shared_vpc_1 = require("../vws/cfn-shared-vpc");
const clusterNamePrefix = 'GitHubActionsRunnerCluster';
const serviceNamePrefix = 'GitHubActionsRunnerService';
const executionRoleNamePrefix = 'GitHubActionsRunnerTaskExecutionRole';
const securityGroupNamePrefix = 'GitHubActionsRunnerSecurityGroup';
const taskDefinitionFamilyPrefix = 'GitHubActionsRunnerTaskDefinitionFamily';
class CustomActionsRunnerVwsStackDeploymentPolicy extends aws_iam_1.Policy {
    constructor(scope, id, props) {
        const policyProps = {
            statements: [
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ec2:CreateSecurityGroup',
                        'ec2:DescribeSecurityGroups',
                        'ecs:CreateCluster',
                        'ecs:RegisterTaskDefinition',
                        'ecs:DescribeTaskDefinition',
                        'ecs:DeregisterTaskDefinition',
                    ],
                    // no resource restrictions possible
                    resources: ['*'],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ec2:AuthorizeSecurityGroupEgress',
                        'ec2:DeleteSecurityGroup',
                        'ec2:RevokeSecurityGroupEgress',
                    ],
                    // security group id is not known
                    resources: [`arn:aws:ec2:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ecs:DeleteCluster',
                        'ecs:DescribeClusters',
                    ],
                    resources: [
                        `arn:aws:ecs:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:cluster/${clusterNamePrefix}*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ecs:CreateService',
                        'ecs:DeleteService',
                        'ecs:DescribeServices',
                    ],
                    resources: [
                        `arn:aws:ecs:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:service/${clusterNamePrefix}*/${serviceNamePrefix}*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'cloudformation:DescribeStacks',
                        'cloudformation:CreateChangeSet',
                        'cloudformation:DescribeChangeSet',
                        'cloudformation:ExecuteChangeSet',
                        'cloudformation:GetTemplateSummary',
                        'cloudformation:DeleteStack',
                        'cloudformation:CreateStack',
                        'cloudformation:UpdateStack',
                    ],
                    resources: [
                        `arn:aws:cloudformation:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:stack/${props.stackName}*`,
                    ],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'ssm:GetParameters',
                    ],
                    resources: [`arn:aws:ssm:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:parameter/cdk-bootstrap/*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'iam:CreateRole',
                        'iam:GetRole',
                        'iam:GetRolePolicy',
                        'iam:DeleteRole',
                        'iam:DeleteRolePolicy',
                        'iam:PutRolePolicy',
                        'iam:PassRole',
                    ],
                    resources: [`arn:aws:iam::${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:role/${executionRoleNamePrefix}*`],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'iam:PassRole',
                    ],
                    resources: [props.roleArn],
                }),
                new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'logs:CreateLogGroup',
                        'logs:PutRetentionPolicy',
                        'logs:DescribeLogGroups',
                    ],
                    resources: [`arn:aws:logs:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:${aws_cdk_lib_1.Fn.ref('AWS::AccountId')}:*`],
                }),
            ],
        };
        super(scope, id, policyProps);
    }
}
exports.CustomActionsRunnerVwsStackDeploymentPolicy = CustomActionsRunnerVwsStackDeploymentPolicy;
class CustomActionsRunnerVwsStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const runnerTag = new aws_cdk_lib_1.CfnParameter(this, 'RunnerTagParameter', {
            description: 'The tag to use in GH Actions via runs-on.',
            type: 'String',
            default: props.runnerTag ? props.runnerTag : 'vws',
        }).valueAsString;
        const runnerName = new aws_cdk_lib_1.CfnParameter(this, 'RunnerNameParameter', {
            description: 'Name of your runner. Must be unique per repo.',
            type: 'String',
            default: props.runnerName ? props.runnerName : 'vws-runner',
        }).valueAsString;
        const suffix = new aws_cdk_lib_1.CfnParameter(this, 'SuffixParameter', {
            description: 'To avoid name clashes when deploying stack multiple times into the same account. Needed for testing.',
            type: 'String',
            default: props.suffix ? props.suffix : '',
        }).valueAsString;
        const roleArn = new aws_cdk_lib_1.CfnParameter(this, 'RoleArnParameter', {
            description: 'ARN of the role that the container of the Runner will use.',
            type: 'String',
            default: props.roleArn,
            minLength: 1,
        }).valueAsString;
        const privateKeyCmkArn = new aws_cdk_lib_1.CfnParameter(this, 'PrivateKeyCmkArnParameter', {
            description: 'ARN of CMK encrypting the private key.',
            type: 'String',
            default: props.privateKeyCmkArn,
            minLength: 1,
        }).valueAsString;
        const privateKeySecret = new aws_cdk_lib_1.CfnParameter(this, 'PrivateKeySecretParameter', {
            description: 'name of the secret containing the private key of your GH App.',
            type: 'String',
            default: props.privateKeySecret,
            minLength: 1,
        }).valueAsString;
        const githubOrg = new aws_cdk_lib_1.CfnParameter(this, 'GithubOrgParameter', {
            description: 'Your GH org.',
            type: 'String',
            default: props.githubOrg,
            minLength: 1,
        }).valueAsString;
        const githubRepo = new aws_cdk_lib_1.CfnParameter(this, 'GithubRepoParameter', {
            description: 'Your GH repo.',
            type: 'String',
            default: props.githubRepo,
            minLength: 1,
        }).valueAsString;
        const githubAppId = new aws_cdk_lib_1.CfnParameter(this, 'GithubAppIdParameter', {
            description: 'The appId of your GH App that is used to authenticate the runner.',
            type: 'String',
            default: props.githubAppId,
            minLength: 1,
        }).valueAsString;
        const sharedVpc = new cfn_shared_vpc_1.CfnSharedVpc(this, 'SharedPipelineVpc');
        const vpc = sharedVpc.vpc(this.availabilityZones);
        // https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#communication-between-self-hosted-runners-and-github
        const proxy = new cfn_proxy_1.CfnProxy(this, 'PipelineProxy', {
            allowedCidrs: [],
            allowedPorts: [443],
            allowedSuffixes: [
                'github.com',
                'pipelines.actions.githubusercontent.com',
                'actions.githubusercontent.com',
                'github-releases.githubusercontent.com',
                'github-registry-files.githubusercontent.com',
                'codeload.github.com',
                'pkg.github.com',
                'pkg-cache.githubusercontent.com',
                'pkg-containers.githubusercontent.com',
                'pkg-containers-az.githubusercontent.com',
            ],
        });
        const proxyCredentials = new cfn_proxy_1.CfnProxyCredentials(this, 'ProxyCredentials', {
            instance: proxy,
            principals: [new aws_iam_1.AccountPrincipal(aws_cdk_lib_1.Stack.of(this).account).arn],
        });
        const proxySecret = aws_secretsmanager_1.Secret.fromSecretAttributes(this, 'ImportedSecret', { secretCompleteArn: proxyCredentials.secretsArn });
        const cluster = new aws_ecs_1.Cluster(this, 'Cluster', {
            clusterName: `${clusterNamePrefix}${suffix}`,
            vpc: vpc,
        });
        const executionRole = new aws_iam_1.Role(this, 'TaskExecutionRole', {
            roleName: `${executionRoleNamePrefix}${suffix}`,
            assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
        });
        executionRole.addToPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'kms:Decrypt',
                'kms:DescribeKey',
            ],
            resources: [
                `arn:aws:kms:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:637378239786:key/*`,
            ],
        }));
        executionRole.addToPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'secretsmanager:GetSecretValue',
            ],
            resources: [
                `arn:aws:secretsmanager:${aws_cdk_lib_1.Fn.ref('AWS::Region')}:637378239786:secret:vws/resources/proxy/production/*`,
            ],
        }));
        const taskDefinition = new aws_ecs_1.FargateTaskDefinition(this, 'TaskDefinition', {
            family: `${taskDefinitionFamilyPrefix}${suffix}`,
            memoryLimitMiB: 512,
            taskRole: aws_iam_1.Role.fromRoleArn(this, 'RunnerRole', roleArn, {
                mutable: false,
            }),
            executionRole: executionRole,
        });
        const privateKeyCmk = aws_kms_1.Key.fromKeyArn(this, 'PrivateKeyCmk', privateKeyCmkArn);
        privateKeyCmk.grantDecrypt(executionRole);
        const privateKey = aws_secretsmanager_1.Secret.fromSecretNameV2(this, 'PrivateKey', privateKeySecret);
        privateKey.grantRead(executionRole);
        const repository = aws_ecr_1.Repository.fromRepositoryArn(this, 'Repository', 'arn:aws:ecr:eu-west-1:326168051205:repository/github-actions-runner');
        taskDefinition.addContainer('DefaultContainer', {
            image: aws_ecs_1.ContainerImage.fromEcrRepository(repository, props.version),
            environment: {
                PROXY_DNS_NAME: proxy.dnsName,
                NO_PROXY: 'amazonaws.com',
                NAME: runnerName,
                TAG: runnerTag,
                GITHUB_APP_ID: githubAppId,
                GITHUB_ORG: githubOrg,
                GITHUB_REPO: githubRepo,
            },
            secrets: {
                PROXY_USER: ecs.Secret.fromSecretsManager(proxySecret, 'username'),
                PROXY_PASSWORD: ecs.Secret.fromSecretsManager(proxySecret, 'password'),
                GITHUB_APP_PRIVATE_KEY: ecs.Secret.fromSecretsManager(privateKey),
            },
            logging: aws_ecs_1.LogDriver.awsLogs({
                streamPrefix: 'runner',
            }),
        });
        const securityGroup = new aws_ec2_1.SecurityGroup(this, 'SecurityGroup', {
            vpc: vpc,
            securityGroupName: `${securityGroupNamePrefix}${suffix}`,
        });
        new aws_ecs_1.FargateService(this, 'Service', {
            serviceName: `${serviceNamePrefix}${suffix}`,
            cluster: cluster,
            taskDefinition: taskDefinition,
            minHealthyPercent: 0,
            maxHealthyPercent: 100,
            securityGroups: [securityGroup],
        });
    }
}
exports.CustomActionsRunnerVwsStack = CustomActionsRunnerVwsStack;
//# sourceMappingURL=data:application/json;base64,