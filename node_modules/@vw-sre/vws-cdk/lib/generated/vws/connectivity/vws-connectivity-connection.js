"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnConnection = exports.toJson_CfnConnectionProps = void 0;
// Generated by cdk-import
const cdk = require("aws-cdk-lib");
/**
 * Converts an object of type 'CfnConnectionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnConnectionProps(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'Network': obj.network,
        'VpcId': obj.vpcId,
        'TransitGatewayId': obj.transitGatewayId,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : (Object.assign(Object.assign({}, r), { [i[0]]: i[1] })), {});
}
exports.toJson_CfnConnectionProps = toJson_CfnConnectionProps;
/* eslint-enable max-len, quote-props */
/**
 * A CloudFormation `VWS::Connectivity::Connection`
 *
 * @cloudformationResource VWS::Connectivity::Connection
 * @stability external
 */
class CfnConnection extends cdk.CfnResource {
    /**
     * Create a new `VWS::Connectivity::Connection`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnConnection.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnConnectionProps(props) });
        this.props = props;
        this.attrId = cdk.Token.asString(this.getAtt('Id'));
    }
}
exports.CfnConnection = CfnConnection;
/**
* The CloudFormation resource type name for this resource class.
*/
CfnConnection.CFN_RESOURCE_TYPE_NAME = "VWS::Connectivity::Connection";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidndzLWNvbm5lY3Rpdml0eS1jb25uZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidndzLWNvbm5lY3Rpdml0eS1jb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBCQUEwQjtBQUMxQixtQ0FBbUM7QUFnQ25DOztHQUVHO0FBQ0gseUNBQXlDO0FBQ3pDLFNBQWdCLHlCQUF5QixDQUFDLEdBQW1DO0lBQzNFLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUFFLE9BQU8sU0FBUyxDQUFDO0tBQUU7SUFDNUMsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsR0FBRyxDQUFDLE9BQU87UUFDdEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1FBQ2xCLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxnQkFBZ0I7S0FDekMsQ0FBQztJQUNGLDBCQUEwQjtJQUMxQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUNBQU0sQ0FBQyxLQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUcsQ0FBQztBQVRELDhEQVNDO0FBQ0Qsd0NBQXdDO0FBR3hDOzs7OztHQUtHO0FBQ0gsTUFBYSxhQUFjLFNBQVEsR0FBRyxDQUFDLFdBQVc7SUFnQmhEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBMkIsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDNUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLHNCQUFzQixFQUFFLFVBQVUsRUFBRSx5QkFBeUIsQ0FBQyxLQUFLLENBQUUsRUFBRSxDQUFDLENBQUM7UUFFaEgsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7QUE3Qkgsc0NBOEJDO0FBN0JDOztFQUVFO0FBQ3FCLG9DQUFzQixHQUFHLCtCQUErQixDQUFDIn0=