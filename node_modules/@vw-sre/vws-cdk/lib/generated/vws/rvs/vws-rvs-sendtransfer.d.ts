import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';
/**
 * Creates a transfer of objects from a S3 bucket via RVS.
 *
 * @schema CfnSendTransferProps
 */
export interface CfnSendTransferProps {
    /**
     * The location of the source objects to send via RVS.
     *
     * @schema CfnSendTransferProps#Source
     */
    readonly source: CfnSendTransferPropsSource;
    /**
     * Record properties for the send job.
     *
     * @schema CfnSendTransferProps#Record
     */
    readonly record?: CfnSendTransferPropsRecord;
    /**
     * Specifies the RVS transfer parameter.
     *
     * @schema CfnSendTransferProps#Transfer
     */
    readonly transfer: CfnSendTransferPropsTransfer;
    /**
     * Charset conversion that should be applied before sending the transfer.
     *
     * @schema CfnSendTransferProps#CharsetConversion
     */
    readonly charsetConversion?: CfnSendTransferPropsCharsetConversion;
    /**
     * Enable encrypted transfer to the target RVS station. The encryption is end-to-end in the RVS OFTP2 protocol and requires the receiving station to have OFTP2 and encryption support.
     *
     * @schema CfnSendTransferProps#Encryption
     */
    readonly encryption?: CfnSendTransferPropsEncryption;
}
/**
 * Converts an object of type 'CfnSendTransferProps' to JSON representation.
 */
export declare function toJson_CfnSendTransferProps(obj: CfnSendTransferProps | undefined): Record<string, any> | undefined;
/**
 * The location of the source objects to send via RVS.
 *
 * @schema CfnSendTransferPropsSource
 */
export interface CfnSendTransferPropsSource {
    /**
     * The name of the Amazon S3 bucket.
     *
     * @schema CfnSendTransferPropsSource#S3BucketName
     */
    readonly s3BucketName: string;
    /**
     * The key of the object to send with RVS.
     *
     * @schema CfnSendTransferPropsSource#S3ObjectKey
     */
    readonly s3ObjectKey: string;
    /**
     * The Amazon Resource Name (ARN) of a role to assume that can read from the source.
     *
     * @schema CfnSendTransferPropsSource#RoleArn
     */
    readonly roleArn: string;
}
/**
 * Converts an object of type 'CfnSendTransferPropsSource' to JSON representation.
 */
export declare function toJson_CfnSendTransferPropsSource(obj: CfnSendTransferPropsSource | undefined): Record<string, any> | undefined;
/**
 * Record properties for the send job.
 *
 * @schema CfnSendTransferPropsRecord
 */
export interface CfnSendTransferPropsRecord {
    /**
     * Format of the transferred file.
     *
     * @schema CfnSendTransferPropsRecord#Format
     */
    readonly format?: CfnSendTransferPropsRecordFormat;
    /**
     * Specifies if the transferred file is a text file or a binary file. Only valid for format FIXED or VARIABLE.
     *
     * @schema CfnSendTransferPropsRecord#Mode
     */
    readonly mode?: CfnSendTransferPropsRecordMode;
    /**
     * The maximal sentence length. Required for FIXED Format.
     *
     * @schema CfnSendTransferPropsRecord#Length
     */
    readonly length?: number;
}
/**
 * Converts an object of type 'CfnSendTransferPropsRecord' to JSON representation.
 */
export declare function toJson_CfnSendTransferPropsRecord(obj: CfnSendTransferPropsRecord | undefined): Record<string, any> | undefined;
/**
 * Specifies the RVS transfer parameter.
 *
 * @schema CfnSendTransferPropsTransfer
 */
export interface CfnSendTransferPropsTransfer {
    /**
     * The virtual data set name (filename) used in the RVS transfer. The VDSN must be unique and must not be used in another Receive Rule. The VDSN also specifies to what station the transfer will be delivered to.
     *
     * @schema CfnSendTransferPropsTransfer#VDSN
     */
    readonly vdsn: string;
}
/**
 * Converts an object of type 'CfnSendTransferPropsTransfer' to JSON representation.
 */
export declare function toJson_CfnSendTransferPropsTransfer(obj: CfnSendTransferPropsTransfer | undefined): Record<string, any> | undefined;
/**
 * Charset conversion that should be applied before sending the transfer.
 *
 * @schema CfnSendTransferPropsCharsetConversion
 */
export declare enum CfnSendTransferPropsCharsetConversion {
    /** ANSI-IBM037 */
    ANSI_IBM037 = "ANSI-IBM037",
    /** ANSI-IBM273 */
    ANSI_IBM273 = "ANSI-IBM273",
    /** ASCII-IBM037 */
    ASCII_IBM037 = "ASCII-IBM037",
    /** ASCII-IBM273 */
    ASCII_IBM273 = "ASCII-IBM273",
    /** ASCII-IBM500 */
    ASCII_IBM500 = "ASCII-IBM500",
    /** IBM037-ANSI */
    IBM037_ANSI = "IBM037-ANSI",
    /** IBM037-ASCII */
    IBM037_ASCII = "IBM037-ASCII",
    /** IBM273-ANSI */
    IBM273_ANSI = "IBM273-ANSI",
    /** IBM273-ASCII */
    IBM273_ASCII = "IBM273-ASCII",
    /** IBM500-ASCII */
    IBM500_ASCII = "IBM500-ASCII"
}
/**
 * Enable encrypted transfer to the target RVS station. The encryption is end-to-end in the RVS OFTP2 protocol and requires the receiving station to have OFTP2 and encryption support.
 *
 * @schema CfnSendTransferPropsEncryption
 */
export declare enum CfnSendTransferPropsEncryption {
    /** DISABLED */
    DISABLED = "DISABLED",
    /** ENABLED */
    ENABLED = "ENABLED"
}
/**
 * Format of the transferred file.
 *
 * @schema CfnSendTransferPropsRecordFormat
 */
export declare enum CfnSendTransferPropsRecordFormat {
    /** TEXT */
    TEXT = "TEXT",
    /** FIXED */
    FIXED = "FIXED",
    /** VARIABLE */
    VARIABLE = "VARIABLE",
    /** UNSTRUCTURED */
    UNSTRUCTURED = "UNSTRUCTURED"
}
/**
 * Specifies if the transferred file is a text file or a binary file. Only valid for format FIXED or VARIABLE.
 *
 * @schema CfnSendTransferPropsRecordMode
 */
export declare enum CfnSendTransferPropsRecordMode {
    /** TXT */
    TXT = "TXT",
    /** BIN */
    BIN = "BIN"
}
/**
 * A CloudFormation `VWS::RVS::SendTransfer`
 *
 * @cloudformationResource VWS::RVS::SendTransfer
 * @stability external
 */
export declare class CfnSendTransfer extends cdk.CfnResource {
    /**
    * The CloudFormation resource type name for this resource class.
    */
    static readonly CFN_RESOURCE_TYPE_NAME = "VWS::RVS::SendTransfer";
    /**
     * Resource props.
     */
    readonly props: CfnSendTransferProps;
    /**
     * Attribute `VWS::RVS::SendTransfer.Id`
     */
    readonly attrId: string;
    /**
     * Attribute `VWS::RVS::SendTransfer.EventBusArn`
     */
    readonly attrEventBusArn: string;
    /**
     * Create a new `VWS::RVS::SendTransfer`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope: constructs.Construct, id: string, props: CfnSendTransferProps);
}
