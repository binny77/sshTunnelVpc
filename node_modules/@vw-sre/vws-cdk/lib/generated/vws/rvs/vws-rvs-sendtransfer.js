"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSendTransfer = exports.CfnSendTransferPropsRecordMode = exports.CfnSendTransferPropsRecordFormat = exports.CfnSendTransferPropsEncryption = exports.CfnSendTransferPropsCharsetConversion = exports.toJson_CfnSendTransferPropsTransfer = exports.toJson_CfnSendTransferPropsRecord = exports.toJson_CfnSendTransferPropsSource = exports.toJson_CfnSendTransferProps = void 0;
// Generated by cdk-import
const cdk = require("aws-cdk-lib");
/**
 * Converts an object of type 'CfnSendTransferProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnSendTransferProps(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'Source': toJson_CfnSendTransferPropsSource(obj.source),
        'Record': toJson_CfnSendTransferPropsRecord(obj.record),
        'Transfer': toJson_CfnSendTransferPropsTransfer(obj.transfer),
        'CharsetConversion': obj.charsetConversion,
        'Encryption': obj.encryption,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : (Object.assign(Object.assign({}, r), { [i[0]]: i[1] })), {});
}
exports.toJson_CfnSendTransferProps = toJson_CfnSendTransferProps;
/**
 * Converts an object of type 'CfnSendTransferPropsSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnSendTransferPropsSource(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'S3BucketName': obj.s3BucketName,
        'S3ObjectKey': obj.s3ObjectKey,
        'RoleArn': obj.roleArn,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : (Object.assign(Object.assign({}, r), { [i[0]]: i[1] })), {});
}
exports.toJson_CfnSendTransferPropsSource = toJson_CfnSendTransferPropsSource;
/**
 * Converts an object of type 'CfnSendTransferPropsRecord' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnSendTransferPropsRecord(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'Format': obj.format,
        'Mode': obj.mode,
        'Length': obj.length,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : (Object.assign(Object.assign({}, r), { [i[0]]: i[1] })), {});
}
exports.toJson_CfnSendTransferPropsRecord = toJson_CfnSendTransferPropsRecord;
/**
 * Converts an object of type 'CfnSendTransferPropsTransfer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
function toJson_CfnSendTransferPropsTransfer(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'VDSN': obj.vdsn,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : (Object.assign(Object.assign({}, r), { [i[0]]: i[1] })), {});
}
exports.toJson_CfnSendTransferPropsTransfer = toJson_CfnSendTransferPropsTransfer;
/* eslint-enable max-len, quote-props */
/**
 * Charset conversion that should be applied before sending the transfer.
 *
 * @schema CfnSendTransferPropsCharsetConversion
 */
var CfnSendTransferPropsCharsetConversion;
(function (CfnSendTransferPropsCharsetConversion) {
    /** ANSI-IBM037 */
    CfnSendTransferPropsCharsetConversion["ANSI_IBM037"] = "ANSI-IBM037";
    /** ANSI-IBM273 */
    CfnSendTransferPropsCharsetConversion["ANSI_IBM273"] = "ANSI-IBM273";
    /** ASCII-IBM037 */
    CfnSendTransferPropsCharsetConversion["ASCII_IBM037"] = "ASCII-IBM037";
    /** ASCII-IBM273 */
    CfnSendTransferPropsCharsetConversion["ASCII_IBM273"] = "ASCII-IBM273";
    /** ASCII-IBM500 */
    CfnSendTransferPropsCharsetConversion["ASCII_IBM500"] = "ASCII-IBM500";
    /** IBM037-ANSI */
    CfnSendTransferPropsCharsetConversion["IBM037_ANSI"] = "IBM037-ANSI";
    /** IBM037-ASCII */
    CfnSendTransferPropsCharsetConversion["IBM037_ASCII"] = "IBM037-ASCII";
    /** IBM273-ANSI */
    CfnSendTransferPropsCharsetConversion["IBM273_ANSI"] = "IBM273-ANSI";
    /** IBM273-ASCII */
    CfnSendTransferPropsCharsetConversion["IBM273_ASCII"] = "IBM273-ASCII";
    /** IBM500-ASCII */
    CfnSendTransferPropsCharsetConversion["IBM500_ASCII"] = "IBM500-ASCII";
})(CfnSendTransferPropsCharsetConversion = exports.CfnSendTransferPropsCharsetConversion || (exports.CfnSendTransferPropsCharsetConversion = {}));
/**
 * Enable encrypted transfer to the target RVS station. The encryption is end-to-end in the RVS OFTP2 protocol and requires the receiving station to have OFTP2 and encryption support.
 *
 * @schema CfnSendTransferPropsEncryption
 */
var CfnSendTransferPropsEncryption;
(function (CfnSendTransferPropsEncryption) {
    /** DISABLED */
    CfnSendTransferPropsEncryption["DISABLED"] = "DISABLED";
    /** ENABLED */
    CfnSendTransferPropsEncryption["ENABLED"] = "ENABLED";
})(CfnSendTransferPropsEncryption = exports.CfnSendTransferPropsEncryption || (exports.CfnSendTransferPropsEncryption = {}));
/**
 * Format of the transferred file.
 *
 * @schema CfnSendTransferPropsRecordFormat
 */
var CfnSendTransferPropsRecordFormat;
(function (CfnSendTransferPropsRecordFormat) {
    /** TEXT */
    CfnSendTransferPropsRecordFormat["TEXT"] = "TEXT";
    /** FIXED */
    CfnSendTransferPropsRecordFormat["FIXED"] = "FIXED";
    /** VARIABLE */
    CfnSendTransferPropsRecordFormat["VARIABLE"] = "VARIABLE";
    /** UNSTRUCTURED */
    CfnSendTransferPropsRecordFormat["UNSTRUCTURED"] = "UNSTRUCTURED";
})(CfnSendTransferPropsRecordFormat = exports.CfnSendTransferPropsRecordFormat || (exports.CfnSendTransferPropsRecordFormat = {}));
/**
 * Specifies if the transferred file is a text file or a binary file. Only valid for format FIXED or VARIABLE.
 *
 * @schema CfnSendTransferPropsRecordMode
 */
var CfnSendTransferPropsRecordMode;
(function (CfnSendTransferPropsRecordMode) {
    /** TXT */
    CfnSendTransferPropsRecordMode["TXT"] = "TXT";
    /** BIN */
    CfnSendTransferPropsRecordMode["BIN"] = "BIN";
})(CfnSendTransferPropsRecordMode = exports.CfnSendTransferPropsRecordMode || (exports.CfnSendTransferPropsRecordMode = {}));
/**
 * A CloudFormation `VWS::RVS::SendTransfer`
 *
 * @cloudformationResource VWS::RVS::SendTransfer
 * @stability external
 */
class CfnSendTransfer extends cdk.CfnResource {
    /**
     * Create a new `VWS::RVS::SendTransfer`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnSendTransfer.CFN_RESOURCE_TYPE_NAME, properties: toJson_CfnSendTransferProps(props) });
        this.props = props;
        this.attrId = cdk.Token.asString(this.getAtt('Id'));
        this.attrEventBusArn = cdk.Token.asString(this.getAtt('EventBusArn'));
    }
}
exports.CfnSendTransfer = CfnSendTransfer;
/**
* The CloudFormation resource type name for this resource class.
*/
CfnSendTransfer.CFN_RESOURCE_TYPE_NAME = "VWS::RVS::SendTransfer";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidndzLXJ2cy1zZW5kdHJhbnNmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2d3MtcnZzLXNlbmR0cmFuc2Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEI7QUFDMUIsbUNBQW1DO0FBOENuQzs7R0FFRztBQUNILHlDQUF5QztBQUN6QyxTQUFnQiwyQkFBMkIsQ0FBQyxHQUFxQztJQUMvRSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7UUFBRSxPQUFPLFNBQVMsQ0FBQztLQUFFO0lBQzVDLE1BQU0sTUFBTSxHQUFHO1FBQ2IsUUFBUSxFQUFFLGlDQUFpQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDdkQsUUFBUSxFQUFFLGlDQUFpQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDdkQsVUFBVSxFQUFFLG1DQUFtQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDN0QsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLGlCQUFpQjtRQUMxQyxZQUFZLEVBQUUsR0FBRyxDQUFDLFVBQVU7S0FDN0IsQ0FBQztJQUNGLDBCQUEwQjtJQUMxQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUNBQU0sQ0FBQyxLQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUcsQ0FBQztBQVhELGtFQVdDO0FBZ0NEOztHQUVHO0FBQ0gseUNBQXlDO0FBQ3pDLFNBQWdCLGlDQUFpQyxDQUFDLEdBQTJDO0lBQzNGLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUFFLE9BQU8sU0FBUyxD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