"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectivityVPC = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_route53resolver_1 = require("aws-cdk-lib/aws-route53resolver");
const constructs_1 = require("constructs");
const aspect_vpc_1 = require("../aspects/aspect-vpc");
const generated_1 = require("../generated");
/**
 * This Contruct provides a VPC with public and isolated subnets with cidr: 10.0.0.0/16.
 * In addition the VPC contains subnets within a VWS::Network cidr range and a transit gateway connection.
 *
 * To deploy your components into specific subnets please use the exposed subnet
 * lists instead accessing them via the exposed vpc!
 * @experimental
 */
class ConnectivityVPC extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        if (props.azs.length < 1) {
            throw new Error(`Invalid property azs: "${JSON.stringify(props.azs)}" given. Make sure to provide at least one availability zone.`);
        }
        const cfnNetwork = new generated_1.CfnNetwork(this, 'Network', {
            pool: props.pool,
            size: props.size,
        });
        const stockVpc = new aws_ec2_1.Vpc(this, 'VPC', {
            cidr: '10.0.0.0/16',
            subnetConfiguration: [
                {
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                    cidrMask: 24,
                    name: 'Ingress',
                    reserved: false,
                },
                {
                    subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                    cidrMask: 24,
                    name: 'App',
                    reserved: false,
                },
            ],
            maxAzs: props.azs.length,
        });
        aws_cdk_lib_1.Aspects.of(stockVpc).add(new aspect_vpc_1.DisableMapPublicIpOnLaunch());
        const cidrBlock = new aws_ec2_1.CfnVPCCidrBlock(this, 'NetworkCidr', {
            vpcId: stockVpc.vpcId,
            cidrBlock: cfnNetwork.attrNetwork,
        });
        let cidrBits = 32 - 1 - props.size;
        let cidrCount = props.azs.length;
        const cfnConnectivitySubnets = [];
        props.azs.forEach((az, index) => {
            cfnConnectivitySubnets.push(new aws_ec2_1.CfnSubnet(this, `ConnectivitySubnet${index}`, {
                vpcId: stockVpc.vpcId,
                cidrBlock: aws_cdk_lib_1.Fn.select(index, aws_cdk_lib_1.Fn.cidr(cfnNetwork.attrNetwork, cidrCount, String(cidrBits))),
                availabilityZone: az,
                mapPublicIpOnLaunch: false,
            }));
        });
        cfnConnectivitySubnets.forEach((subnet) => {
            subnet.addDependsOn(cfnNetwork);
            subnet.addDependsOn(cidrBlock);
        });
        const cfnRouteTable = new aws_ec2_1.CfnRouteTable(this, 'RouteTable', {
            vpcId: stockVpc.vpcId,
        });
        const cfnAttachment = new aws_ec2_1.CfnTransitGatewayAttachment(this, 'Attachment', {
            vpcId: stockVpc.vpcId,
            subnetIds: cfnConnectivitySubnets.map(s => s.ref),
            transitGatewayId: cfnNetwork.attrTransitGatewayId,
        });
        const cfnDefaultRoute = new aws_ec2_1.CfnRoute(this, 'DefaultRoute', {
            destinationCidrBlock: '0.0.0.0/0',
            transitGatewayId: cfnNetwork.attrTransitGatewayId,
            routeTableId: cfnRouteTable.ref,
        });
        cfnDefaultRoute.addDependsOn(cfnAttachment);
        cfnConnectivitySubnets.map((subnet, index) => new aws_ec2_1.CfnSubnetRouteTableAssociation(this, `Table${index}`, {
            routeTableId: cfnRouteTable.ref,
            subnetId: subnet.ref,
        }));
        new generated_1.CfnConnection(this, 'Connection', {
            vpcId: stockVpc.vpcId,
            network: cfnNetwork.ref,
            transitGatewayId: cfnNetwork.attrTransitGatewayId,
        });
        if (props.dnsResolvers) {
            const resolver = new generated_1.CfnResolver(this, 'IntranetResolver', {
                pool: 'intranet',
            });
            new aws_route53resolver_1.CfnResolverRuleAssociation(this, 'RRA0', {
                vpcId: stockVpc.vpcId,
                resolverRuleId: aws_cdk_lib_1.Fn.select(0, resolver.attrRules),
            });
            new aws_route53resolver_1.CfnResolverRuleAssociation(this, 'RRA1', {
                vpcId: stockVpc.vpcId,
                resolverRuleId: aws_cdk_lib_1.Fn.select(1, resolver.attrRules),
            });
            new aws_route53resolver_1.CfnResolverRuleAssociation(this, 'RRA2', {
                vpcId: stockVpc.vpcId,
                resolverRuleId: aws_cdk_lib_1.Fn.select(2, resolver.attrRules),
            });
        }
        this.vpc = aws_ec2_1.Vpc.fromVpcAttributes(this, 'VpcFromAttrs', {
            vpcId: stockVpc.vpcId,
            availabilityZones: props.azs,
            publicSubnetIds: stockVpc.publicSubnets.map(subnet => subnet.subnetId),
            isolatedSubnetIds: stockVpc.isolatedSubnets.map(subnet => subnet.subnetId),
            privateSubnetIds: cfnConnectivitySubnets.map(subnet => subnet.ref),
        });
        this.ingressSubnets = this.vpc.publicSubnets;
        this.appSubnets = this.vpc.isolatedSubnets;
        this.connectivitySubnets = this.vpc.privateSubnets;
    }
}
exports.ConnectivityVPC = ConnectivityVPC;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGl2aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29ubmVjdGl2aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUEwQztBQUMxQyxpREFXNkI7QUFDN0IseUVBQTZFO0FBQzdFLDJDQUF1QztBQUN2QyxzREFBbUU7QUFDbkUsNENBQXNFO0FBd0J0RTs7Ozs7OztHQU9HO0FBQ0gsTUFBYSxlQUFnQixTQUFRLHNCQUFTO0lBdUI1QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTJCO1FBQ25FLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FDYiwwQkFBMEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLCtEQUErRCxDQUNuSCxDQUFDO1NBQ0g7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLHNCQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUNqRCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLElBQUksYUFBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFDcEMsSUFBSSxFQUFFLGFBQWE7WUFDbkIsbUJBQW1CLEVBQUU7Z0JBQ25CO29CQUNFLFVBQVUsRUFBRSxvQkFBVSxDQUFDLE1BQU07b0JBQzdCLFFBQVEsRUFBRSxFQUFFO29CQUNaLElBQUksRUFBRSxTQUFTO29CQUNmLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjtnQkFDRDtvQkFDRSxVQUFVLEVBQUUsb0JBQVUsQ0FBQyxnQkFBZ0I7b0JBQ3ZDLFFBQVEsRUFBRSxFQUFFO29CQUNaLElBQUksRUFBRSxLQUFLO29CQUNYLFFBQVEsRUFBRSxLQUFL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