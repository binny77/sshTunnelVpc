"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnRvsSendTransfer = exports.CfnRvsReceiveRule = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const vdsnPattern = (minSuffixLength = 1) => new RegExp(`^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{${minSuffixLength},15}$`);
const vdsnRegex = vdsnPattern();
const vdsnPrefixRegex = vdsnPattern(5);
const validateVdsn = (vdsn) => {
    const match = vdsn.match(vdsnRegex);
    if (!match) {
        throw new Error(`validation error: VDSN ${vdsn} does not match the pattern ${vdsnRegex.source}`);
    }
};
const validateVdsnPrefix = (vdsnPrefix) => {
    const match = vdsnPrefix.match(vdsnPrefixRegex);
    if (!match) {
        throw new Error(`validation error: VDSN ${vdsnPrefix} does not match the pattern ${vdsnPrefixRegex.source}`);
    }
};
/**
 * VWS RVS Receive Rule.
 * This creates a VWS::RVS::ReceiveRule resource.
 * This resource delivers objects it has received on its RVS station to your s3 bucket.
 *
 * @deprecated A custom L2 construct will be provided soon
 * @see https://github.com/vw-sre/vws-cdk/issues/410
 */
class CfnRvsReceiveRule extends aws_cdk_lib_1.CfnResource {
    constructor(scope, id, properties) {
        CfnRvsReceiveRule.validateTransfer(properties.transfer);
        super(scope, id, {
            type: 'VWS::RVS::ReceiveRule',
            properties: {
                Transfer: {
                    VDSN: properties.transfer.vdsn,
                    VDSNPrefix: properties.transfer.vdsnPrefix,
                },
                CharsetConversion: properties.charsetConversion,
                Destination: {
                    S3BucketName: properties.destination.s3BucketName,
                    S3BucketPrefix: properties.destination.s3BucketPrefix,
                    RoleArn: properties.destination.roleArn,
                },
            },
        });
    }
}
exports.CfnRvsReceiveRule = CfnRvsReceiveRule;
CfnRvsReceiveRule.validateTransfer = (transfer) => {
    if (!transfer.vdsn && !transfer.vdsnPrefix) {
        throw new Error('validation error: Either vdsn or vdsnPrefix has to be set.');
    }
    if (transfer.vdsn && transfer.vdsnPrefix) {
        throw new Error('validation error: You cannot specify both vdsn and vdsnPrefix.');
    }
    if (transfer.vdsn) {
        validateVdsn(transfer.vdsn);
    }
    if (transfer.vdsnPrefix) {
        validateVdsnPrefix(transfer.vdsnPrefix);
    }
};
/**
 * VWS RVS SendTransfer
 * This creates a VWS::RVS::SendTransfer resource which allows you to transfer objects from an S3 bucket via RVS.
 *
 * @deprecated A custom L2 construct will be provided soon
 * @see https://github.com/vw-sre/vws-cdk/issues/410
 */
class CfnRvsSendTransfer extends aws_cdk_lib_1.CfnResource {
    constructor(scope, id, properties) {
        validateVdsn(properties.transfer.vdsn);
        super(scope, id, {
            type: 'VWS::RVS::SendTransfer',
            properties: {
                Source: {
                    S3BucketName: properties.source.s3BucketName,
                    S3ObjectKey: properties.source.s3ObjectKey,
                    RoleArn: properties.source.roleArn,
                },
                Transfer: {
                    VDSN: properties.transfer.vdsn,
                },
                CharsetConversion: properties.charsetConversion,
                Encryption: properties.encryption,
            },
        });
    }
    /**
       * The Amazon Resource Name (ARN) of the EventBridge Event Bus where to forward S3 events to.
       */
    get eventBusArn() {
        return super.getAtt('EventBusArn').toString();
    }
}
exports.CfnRvsSendTransfer = CfnRvsSendTransfer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2ZuLXJ2cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNmbi1ydnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTBDO0FBSTFDLE1BQU0sV0FBVyxHQUFHLENBQUMsZUFBZSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsa0RBQWtELGVBQWUsT0FBTyxDQUFDLENBQUM7QUFDbEksTUFBTSxTQUFTLEdBQUcsV0FBVyxFQUFFLENBQUM7QUFDaEMsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXZDLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsSUFBSSwrQkFBK0IsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDbEc7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGtCQUFrQixHQUFHLENBQUMsVUFBa0IsRUFBRSxFQUFFO0lBQ2hELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLFVBQVUsK0JBQStCLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQzlHO0FBQ0gsQ0FBQyxDQUFDO0FBZ0RGOzs7Ozs7O0dBT0c7QUFDSCxNQUFhLGlCQUFrQixTQUFRLHlCQUFXO0lBaUJoRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFVBQW9DO1FBQzVFLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLElBQUksRUFBRSx1QkFBdUI7WUFDN0IsVUFBVSxFQUFFO2dCQUNWLFFBQVEsRUFBRTtvQkFDUixJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJO29CQUM5QixVQUFVLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVO2lCQUMzQztnQkFDRCxpQkFBaUIsRUFBRSxVQUFVLENBQUMsaUJBQWlCO2dCQUMvQyxXQUFXLEVBQUU7b0JBQ1gsWUFBWSxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWTtvQkFDakQsY0FBYyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsY0FBYztvQkFDckQsT0FBTyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTztpQkFDeEM7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBbENILDhDQW1DQztBQWpDZ0Isa0NBQWdCLEdBQUcsQ0FBQyxRQUE4QyxFQUFFLEVBQUU7SUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQzFDLE1BQU0sSUFBSSxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztLQUMvRTtJQUNELElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztLQUNuRjtJQUNELElBQUksUUFBUSxDQUFDLElBQUksRUFBRTtRQUNqQixZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ3ZCLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN6QztBQUNILENBQUMsQ0FBQztBQXFFSjs7Ozs7O0dBTUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLHlCQUFXO0lBQ2pELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsVUFBcUM7UUFDN0UsWUFBWSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixJQUFJLEVBQUUsd0JBQXdCO1lBQzlCLFVBQVUsRUFBRTtnQkFDVixNQUFNLEVBQUU7b0JBQ04sWUFBWSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsWUFBWTtvQkFDNUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVztvQkFDMUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTztpQkFDbkM7Z0JBQ0QsUUFBUSxFQUFFO29CQUNSLElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUk7aUJBQy9CO2dCQUNELGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxpQkFBaUI7Z0JBQy9DLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTthQUNsQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7U0FFSztJQUNMLElBQVcsV0FBVztRQUNwQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEQsQ0FBQztDQUNGO0FBMUJELGdEQTBCQyJ9