"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RvsSendTransfer = exports.RvsReceiveRule = exports.RvsCharsetConversion = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_events_1 = require("aws-cdk-lib/aws-events");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const generated_1 = require("../generated");
const vdsnPattern = (minSuffixLength = 1) => new RegExp(`^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{${minSuffixLength},15}$`);
const vdsnRegex = vdsnPattern();
const vdsnPrefixRegex = vdsnPattern(5);
const validateVdsn = (vdsn) => {
    const match = vdsn.match(vdsnRegex);
    if (!match) {
        throw new Error(`validation error: VDSN ${vdsn} does not match the pattern ${vdsnRegex.source}`);
    }
};
const validateVdsnPrefix = (vdsnPrefix) => {
    const match = vdsnPrefix.match(vdsnPrefixRegex);
    if (!match) {
        throw new Error(`validation error: VDSN ${vdsnPrefix} does not match the pattern ${vdsnPrefixRegex.source}`);
    }
};
var RvsCharsetConversion;
(function (RvsCharsetConversion) {
    RvsCharsetConversion["ANSI_IBM037"] = "ANSI-IBM037";
    RvsCharsetConversion["ANSI_IBM273"] = "ANSI-IBM273";
    RvsCharsetConversion["ASCII_IBM037"] = "ASCII-IBM037";
    RvsCharsetConversion["ASCII_IBM273"] = "ASCII-IBM273";
    RvsCharsetConversion["ASCII_IBM500"] = "ASCII-IBM500";
    RvsCharsetConversion["IBM037_ANSI"] = "IBM037-ANSI";
    RvsCharsetConversion["IBM037_ASCII"] = "IBM037-ASCII";
    RvsCharsetConversion["IBM273_ANSI"] = "IBM273-ANSI";
    RvsCharsetConversion["IBM273_ASCII"] = "IBM273-ASCII";
    RvsCharsetConversion["IBM500_ASCII"] = "IBM500-ASCII";
})(RvsCharsetConversion = exports.RvsCharsetConversion || (exports.RvsCharsetConversion = {}));
class RvsReceiveRule extends aws_cdk_lib_1.Resource {
    constructor(scope, id, props) {
        RvsReceiveRule.validateTransfer(props.transfer);
        super(scope, id);
        const role = this.setupRole(props);
        new generated_1.CfnReceiveRule(this, 'Resource', {
            transfer: {
                vdsn: props.transfer.vdsn,
                vdsnPrefix: props.transfer.vdsnPrefix,
            },
            charsetConversion: RvsReceiveRule.convertReceiveCharset(props.charsetConversion),
            destination: {
                s3BucketName: props.destination.bucket.bucketName,
                s3BucketPrefix: props.destination.s3BucketPrefix,
                roleArn: role.roleArn,
            },
        });
    }
    static convertReceiveCharset(charset) {
        switch (charset) {
            case RvsCharsetConversion.ANSI_IBM037:
                return generated_1.CfnReceiveRulePropsCharsetConversion.ANSI_IBM037;
            case RvsCharsetConversion.ANSI_IBM273:
                return generated_1.CfnReceiveRulePropsCharsetConversion.ANSI_IBM273;
            case RvsCharsetConversion.ASCII_IBM037:
                return generated_1.CfnReceiveRulePropsCharsetConversion.ASCII_IBM037;
            case RvsCharsetConversion.ASCII_IBM273:
                return generated_1.CfnReceiveRulePropsCharsetConversion.ASCII_IBM273;
            case RvsCharsetConversion.ASCII_IBM500:
                return generated_1.CfnReceiveRulePropsCharsetConversion.ASCII_IBM500;
            case RvsCharsetConversion.IBM037_ANSI:
                return generated_1.CfnReceiveRulePropsCharsetConversion.IBM037_ANSI;
            case RvsCharsetConversion.IBM037_ASCII:
                return generated_1.CfnReceiveRulePropsCharsetConversion.IBM037_ASCII;
            case RvsCharsetConversion.IBM273_ANSI:
                return generated_1.CfnReceiveRulePropsCharsetConversion.IBM273_ANSI;
            case RvsCharsetConversion.IBM273_ASCII:
                return generated_1.CfnReceiveRulePropsCharsetConversion.IBM273_ASCII;
            case RvsCharsetConversion.IBM500_ASCII:
                return generated_1.CfnReceiveRulePropsCharsetConversion.IBM500_ASCII;
            case undefined:
                return undefined;
        }
    }
    setupRole(props) {
        var _a, _b;
        if (props.destination.role === undefined) {
            props.destination.role = new aws_iam_1.Role(this, 'ResourceRole', {
                assumedBy: new aws_iam_1.AccountPrincipal('074430740969'),
            });
        }
        else {
            props.destination.role.grantAssumeRole(new aws_iam_1.AccountPrincipal('074430740969'));
        }
        const allObjects = path.join((_a = props.destination.s3BucketPrefix) !== null && _a !== void 0 ? _a : '', '*');
        props.destination.role.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                's3:PutObject',
                's3:GetBucketLocation',
            ],
            resources: [
                props.destination.bucket.bucketArn,
                props.destination.bucket.arnForObjects(allObjects),
            ],
        }));
        (_b = props.destination.bucket.encryptionKey) === null || _b === void 0 ? void 0 : _b.grantEncryptDecrypt(props.destination.role);
        return props.destination.role;
    }
}
exports.RvsReceiveRule = RvsReceiveRule;
RvsReceiveRule.validateTransfer = (transfer) => {
    if (!transfer.vdsn && !transfer.vdsnPrefix) {
        throw new Error('validation error: Either vdsn or vdsnPrefix has to be set.');
    }
    if (transfer.vdsn && transfer.vdsnPrefix) {
        throw new Error('validation error: You cannot specify both vdsn and vdsnPrefix.');
    }
    if (transfer.vdsn) {
        validateVdsn(transfer.vdsn);
    }
    if (transfer.vdsnPrefix) {
        validateVdsnPrefix(transfer.vdsnPrefix);
    }
};
class RvsSendTransfer extends aws_cdk_lib_1.Resource {
    constructor(scope, id, props) {
        validateVdsn(props.transfer.vdsn);
        super(scope, id);
        const role = this.setupRole(props);
        const resource = new generated_1.CfnSendTransfer(this, 'Resource', {
            source: {
                s3BucketName: props.source.bucket.bucketName,
                s3ObjectKey: props.source.objectKey,
                roleArn: role.roleArn,
            },
            transfer: {
                vdsn: props.transfer.vdsn,
            },
            charsetConversion: RvsSendTransfer.convertSendCharset(props.charsetConversion),
            encryption: props.encryption,
        });
        this.eventBus = aws_events_1.EventBus.fromEventBusArn(this, 'EventBus', resource.attrEventBusArn);
    }
    static convertSendCharset(charset) {
        switch (charset) {
            case RvsCharsetConversion.ANSI_IBM037:
                return generated_1.CfnSendTransferPropsCharsetConversion.ANSI_IBM037;
            case RvsCharsetConversion.ANSI_IBM273:
                return generated_1.CfnSendTransferPropsCharsetConversion.ANSI_IBM273;
            case RvsCharsetConversion.ASCII_IBM037:
                return generated_1.CfnSendTransferPropsCharsetConversion.ASCII_IBM037;
            case RvsCharsetConversion.ASCII_IBM273:
                return generated_1.CfnSendTransferPropsCharsetConversion.ASCII_IBM273;
            case RvsCharsetConversion.ASCII_IBM500:
                return generated_1.CfnSendTransferPropsCharsetConversion.ASCII_IBM500;
            case RvsCharsetConversion.IBM037_ANSI:
                return generated_1.CfnSendTransferPropsCharsetConversion.IBM037_ANSI;
            case RvsCharsetConversion.IBM037_ASCII:
                return generated_1.CfnSendTransferPropsCharsetConversion.IBM037_ASCII;
            case RvsCharsetConversion.IBM273_ANSI:
                return generated_1.CfnSendTransferPropsCharsetConversion.IBM273_ANSI;
            case RvsCharsetConversion.IBM273_ASCII:
                return generated_1.CfnSendTransferPropsCharsetConversion.IBM273_ASCII;
            case RvsCharsetConversion.IBM500_ASCII:
                return generated_1.CfnSendTransferPropsCharsetConversion.IBM500_ASCII;
            case undefined:
                return undefined;
        }
    }
    setupRole(props) {
        var _a;
        if (props.source.role === undefined) {
            props.source.role = new aws_iam_1.Role(this, 'ResourceRole', {
                assumedBy: new aws_iam_1.AccountPrincipal('074430740969'),
            });
        }
        else {
            props.source.role.grantAssumeRole(new aws_iam_1.AccountPrincipal('074430740969'));
        }
        props.source.bucket.grantRead(props.source.role, props.source.objectKey);
        (_a = props.source.bucket.encryptionKey) === null || _a === void 0 ? void 0 : _a.grantDecrypt(props.source.role);
        return props.source.role;
    }
}
exports.RvsSendTransfer = RvsSendTransfer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUE2QjtBQUM3Qiw2Q0FBdUM7QUFDdkMsdURBQTZEO0FBQzdELGlEQUE2RjtBQUc3Riw0Q0FNc0I7QUFFdEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxrREFBa0QsZUFBZSxPQUFPLENBQUMsQ0FBQztBQUNsSSxNQUFNLFNBQVMsR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUNoQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdkMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtJQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixJQUFJLCtCQUErQixTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNsRztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxVQUFrQixFQUFFLEVBQUU7SUFDaEQsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsVUFBVSwrQkFBK0IsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDOUc7QUFDSCxDQUFDLENBQUM7QUFFRixJQUFZLG9CQVdYO0FBWEQsV0FBWSxvQkFBb0I7SUFDOUIsbURBQTJCLENBQUE7SUFDM0IsbURBQTJCLENBQUE7SUFDM0IscURBQTZCLENBQUE7SUFDN0IscURBQTZCLENBQUE7SUFDN0IscURBQTZCLENBQUE7SUFD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