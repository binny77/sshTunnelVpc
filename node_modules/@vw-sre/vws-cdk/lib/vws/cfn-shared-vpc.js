"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSharedVpc = void 0;
/**
 * Provides access to a shared VWS managed VPC for utility lambdas and other comparable workloads.
 *
 * Provided endpoints
 * - AWS S3
 * - AWS DynamoDB
 * - AWS SecretsManager
 * - AWS CloudWatch Logs
 * - AWS CodeBuild
 * - AWS CodeDepoy
 * - VWS Proxy
 *
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
/**
 * @deprecated
 * @see https://github.com/vw-sre/vws-cdk/tree/main/lib/vws/shared-vpc.ts
 */
class CfnSharedVpc extends aws_cdk_lib_1.CfnResource {
    constructor(scope, id) {
        super(scope, id, {
            type: 'VWS::VPC::Shared',
        });
        this.plainId = id;
    }
    /**
       * returns the sharedVPC id
       */
    get id() {
        return super.getAtt('Id').toString();
    }
    /**
       * return the id ref of the underlying vpc
       */
    get vpcId() {
        return super.getAtt('VpcId').toString();
    }
    /**
       * return a reference to a list of underlying subnets
       */
    get subnetIds() {
        return super.getAtt('Subnets');
    }
    /**
     * returns a VPC object, with isolated subnets.
     * Due to CDK you have to provide the availability zones for which you would like to get references to.
     *
     * Tested with eu-west-1 with ["eu-west-1a", "eu-west-1b", "eu-west-1c"].
     * You can also use CDKs `stack.availabilityZones`, still this would only provide you two azs.
     *
     * @deprecated
     * @see https://github.com/vw-sre/vws-cdk/tree/main/lib/vws/shared-vpc.ts
     */
    vpc(availabilityZones) {
        const subnetIdList = aws_cdk_lib_1.Token.asList(this.subnetIds);
        let subnetIds = [];
        availabilityZones.forEach((_, index) => {
            subnetIds.push(aws_cdk_lib_1.Fn.select(index, subnetIdList));
        });
        return aws_ec2_1.Vpc.fromVpcAttributes(this, `${this.plainId}-Vpc`, {
            vpcId: this.vpcId,
            availabilityZones: availabilityZones,
            isolatedSubnetIds: subnetIds,
        });
    }
}
exports.CfnSharedVpc = CfnSharedVpc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2ZuLXNoYXJlZC12cGMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZm4tc2hhcmVkLXZwYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCw2Q0FBZ0U7QUFDaEUsaURBQWdEO0FBR2hEOzs7R0FHRztBQUNILE1BQWEsWUFBYSxTQUFRLHlCQUFXO0lBRzNDLFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsSUFBSSxFQUFFLGtCQUFrQjtTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7O1NBRUs7SUFDTCxJQUFXLEVBQUU7UUFDWCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVEOztTQUVLO0lBQ0wsSUFBVyxLQUFLO1FBQ2QsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRDs7U0FFSztJQUNMLElBQVcsU0FBUztRQUNsQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLEdBQUcsQ0FBQyxpQkFBMkI7UUFDcEMsTUFBTSxZQUFZLEdBQUcsbUJBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELElBQUksU0FBUyxHQUFhLEVBQUUsQ0FBQztRQUM3QixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLE1BQU0sRUFBRTtZQUN4RCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsaUJBQWlCLEVBQUUsaUJBQWlCO1lBQ3BDLGlCQUFpQixFQUFFLFNBQVM7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdERELG9DQXNEQyJ9