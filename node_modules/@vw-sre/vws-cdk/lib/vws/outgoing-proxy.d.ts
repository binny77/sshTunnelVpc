import { Resource } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import { AccountPrincipal, IRole } from 'aws-cdk-lib/aws-iam';
import { IKey } from 'aws-cdk-lib/aws-kms';
import { ISecret } from 'aws-cdk-lib/aws-secretsmanager';
import { Construct } from 'constructs';
export interface OutgoingProxyProps {
    readonly allowedSuffixes?: string[];
    readonly allowedCidrs?: string[];
    readonly allowedPorts?: number[];
}
/**
 * Creates VWS::Proxy::Instance
 *
 * @see https://docs.vwapps.cloud/vws-vanguard/services/resources/proxy/
 */
export declare class OutgoingProxy extends Resource {
    private readonly resource;
    constructor(scope: Construct, id: string, props: OutgoingProxyProps);
    get id(): string;
    get serviceName(): string;
    get dnsName(): string;
}
export interface OutgoingProxyCredentialsProps {
    instance: OutgoingProxy;
    principals: (AccountPrincipal | IRole)[];
}
/**
 * Creates VWS::Proxy::Credentials and grants access to them for all iam.IGrantable principals
 *
 * @see https://docs.vwapps.cloud/vws-vanguard/services/resources/proxy/
 */
export declare class OutgoingProxyCredentials extends Resource {
    private readonly resource;
    readonly secret: ISecret;
    readonly kmsKey: IKey;
    constructor(scope: Construct, id: string, props: OutgoingProxyCredentialsProps);
    grantRead(identity: iam.IGrantable): void;
}
