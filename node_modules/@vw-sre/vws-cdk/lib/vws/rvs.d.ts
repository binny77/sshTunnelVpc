import { Resource } from 'aws-cdk-lib';
import { IEventBus } from 'aws-cdk-lib/aws-events';
import { IRole } from 'aws-cdk-lib/aws-iam';
import { IBucket } from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';
import { CfnSendTransferPropsEncryption } from '../generated';
export declare enum RvsCharsetConversion {
    ANSI_IBM037 = "ANSI-IBM037",
    ANSI_IBM273 = "ANSI-IBM273",
    ASCII_IBM037 = "ASCII-IBM037",
    ASCII_IBM273 = "ASCII-IBM273",
    ASCII_IBM500 = "ASCII-IBM500",
    IBM037_ANSI = "IBM037-ANSI",
    IBM037_ASCII = "IBM037-ASCII",
    IBM273_ANSI = "IBM273-ANSI",
    IBM273_ASCII = "IBM273-ASCII",
    IBM500_ASCII = "IBM500-ASCII"
}
export interface RvsReceiveRuleProps {
    /**
       * The location where received transfers are saved to.
       */
    destination: {
        /**
             * The name of the Amazon S3 bucket.
             */
        bucket: IBucket;
        /**
             * An optional prefix to be used when saving files into the S3 bucket. If none is specified, transfers will be placed at the root level of the bucket.
             */
        s3BucketPrefix?: string;
        /**
             * The Amazon Resource Name (ARN) of a role to assume that can write to the location.
             */
        role?: IRole;
    };
    /**
       * Specifies the RVS transfer parameter.
       */
    transfer: {
        /**
             * The virtual data set name (filename) used in the RVS transfer.
             * The VDSN must be unique and must not be used in another Receive Rule.
             * You must either specify `VDSN` or `VDSNPrefix`, but not both.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{1,15}$
             */
        vdsn?: string;
        /**
             * A prefix for the virtual data set name (filename) of RVS transfers this receive rule will match for.
             * A receive rule with a VDSN prefix will match all transfers received that start with it.
             * The prefix must not conflict with other prefixes or other VDSN. You must either specify `VDSN` or `VDSNPrefix`, but not both.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{5,15}$
             */
        vdsnPrefix?: string;
    };
    /**
       * Charset conversion that should be applied on the received transfer.
       */
    charsetConversion?: RvsCharsetConversion;
}
export declare class RvsReceiveRule extends Resource {
    private static validateTransfer;
    private static convertReceiveCharset;
    constructor(scope: Construct, id: string, props: RvsReceiveRuleProps);
    private setupRole;
}
export interface RvsSendTransferProps {
    /**
       * The location of the source objects to send via RVS.
       */
    source: {
        bucket: IBucket;
        objectKey: string;
        role?: IRole;
    };
    /**
       * Specifies the RVS transfer parameter.
       */
    transfer: {
        /**
             * The virtual data set name (filename) used in the RVS transfer.
             * The VDSN must be unique and must not be used in another Receive Rule.
             * The VDSN also specifies to what station the transfer will be delivered to.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{1,15}$
             */
        vdsn: string;
    };
    /**
       * Charset conversion that should be applied before sending the transfer.
       */
    charsetConversion?: RvsCharsetConversion;
    /**
       * Enable encrypted transfer to the target RVS station.
       * The encryption is end-to-end in the RVS OFTP2 protocol and requires the receiving station to have OFTP2 and encryption support.
       * Ensure that these requirements are met before enabling the encryption.
       *
       * @default DISABLED
       */
    encryption?: CfnSendTransferPropsEncryption;
}
export declare class RvsSendTransfer extends Resource {
    private static convertSendCharset;
    readonly eventBus: IEventBus;
    constructor(scope: Construct, id: string, props: RvsSendTransferProps);
    private setupRole;
}
