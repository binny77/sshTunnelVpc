import { CfnResource } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { RvsCharsetConversion } from './rvs';
export interface RvsReceiveRuleProperties {
    /**
       * The location where received transfers are saved to.
       */
    destination: {
        /**
             * The name of the Amazon S3 bucket.
             */
        s3BucketName: string;
        /**
             * An optional prefix to be used when saving files into the S3 bucket. If none is specified, transfers will be placed at the root level of the bucket.
             */
        s3BucketPrefix?: string;
        /**
             * The Amazon Resource Name (ARN) of a role to assume that can write to the location.
             */
        roleArn: string;
    };
    /**
       * Specifies the RVS transfer parameter.
       */
    transfer: {
        /**
             * The virtual data set name (filename) used in the RVS transfer.
             * The VDSN must be unique and must not be used in another Receive Rule.
             * You must either specify `VDSN` or `VDSNPrefix`, but not both.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{1,15}$
             */
        vdsn?: string;
        /**
             * A prefix for the virtual data set name (filename) of RVS transfers this receive rule will match for.
             * A receive rule with a VDSN prefix will match all transfers received that start with it.
             * The prefix must not conflict with other prefixes or other VDSN. You must either specify `VDSN` or `VDSNPrefix`, but not both.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{5,15}$
             */
        vdsnPrefix?: string;
    };
    /**
       * Charset conversion that should be applied on the received transfer.
       */
    charsetConversion?: RvsCharsetConversion | string;
}
/**
 * VWS RVS Receive Rule.
 * This creates a VWS::RVS::ReceiveRule resource.
 * This resource delivers objects it has received on its RVS station to your s3 bucket.
 *
 * @deprecated A custom L2 construct will be provided soon
 * @see https://github.com/vw-sre/vws-cdk/issues/410
 */
export declare class CfnRvsReceiveRule extends CfnResource {
    private static validateTransfer;
    constructor(scope: Construct, id: string, properties: RvsReceiveRuleProperties);
}
export interface RvsSendTransferProperties {
    /**
       * The location of the source objects to send via RVS.
       */
    source: {
        /**
             * The name of the Amazon S3 bucket.
             */
        s3BucketName: string;
        /**
             * The key of the object to send with RVS.
             */
        s3ObjectKey: string;
        /**
             * The Amazon Resource Name (ARN) of a role to assume that can read from the source.
             *
             * Pattern: arn:aws(-[\w]+):iam::[0-9]{12}:role/.
             */
        roleArn: string;
    };
    /**
       * Specifies the RVS transfer parameter.
       */
    transfer: {
        /**
             * The virtual data set name (filename) used in the RVS transfer.
             * The VDSN must be unique and must not be used in another Receive Rule.
             * The VDSN also specifies to what station the transfer will be delivered to.
             *
             * Pattern: ^[QED][A-Z0-9]{2}.[A-Z0-9]{6}.[.\\-/()&A-Z0-9]{1,15}$
             */
        vdsn: string;
    };
    /**
       * Charset conversion that should be applied before sending the transfer.
       */
    charsetConversion?: RvsCharsetConversion | string;
    /**
       * Enable encrypted transfer to the target RVS station.
       * The encryption is end-to-end in the RVS OFTP2 protocol and requires the receiving station to have OFTP2 and encryption support.
       * Ensure that these requirements are met before enabling the encryption.
       *
       * @default DISABLED
       */
    encryption?: 'ENABLED' | 'DISABLED';
}
/**
 * VWS RVS SendTransfer
 * This creates a VWS::RVS::SendTransfer resource which allows you to transfer objects from an S3 bucket via RVS.
 *
 * @deprecated A custom L2 construct will be provided soon
 * @see https://github.com/vw-sre/vws-cdk/issues/410
 */
export declare class CfnRvsSendTransfer extends CfnResource {
    constructor(scope: Construct, id: string, properties: RvsSendTransferProperties);
    /**
       * The Amazon Resource Name (ARN) of the EventBridge Event Bus where to forward S3 events to.
       */
    get eventBusArn(): string;
}
